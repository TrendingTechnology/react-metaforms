{"version":3,"sources":["DemoContainer.tsx","DonutChart/DonutChartDemo.tsx","LineChart/LineChartDemo.tsx","RowChart/RowCharDemo.tsx","BarChart/BarChartDemo.tsx","NumberChart/NumberChartDemo.tsx","index.tsx","Axis.tsx","utils.ts","DonutChart/DonutChart.tsx","RowChart/RowChart.tsx","BarChart/BarChart.tsx","NumberChart/NumberChart.tsx","export.ts","LineChart/FilterX.tsx","LineChart/Focus.tsx","LineChart/LineChart.tsx","focusedHOC.tsx"],"names":["DemoContainer","children","title","settings","data","React","useState","changes","onChange","input","setInput","isInvalid","setIsInvalid","style","margin","display","justifyContent","Object","keys","map","key","id","type","checked","target","htmlFor","value","parseInt","height","rows","cols","event","parsed","JSON","parse","error","defaultValue","stringify","label","colour","DonutChartDemo","filters","setFilters","customValueFormat","filterable","width","undefined","onFilter","find","r","filter","d","valueFormat","x","Math","floor","LineChartDemo","from","to","setFilter","withXLabel","withYLabel","useKeyFormat","useFilters","xLabelRotate","xAxisTicksTooltip","yAxisLabel","xAxisLabel","filterFrom","filterTo","keyFormat","xAxisTicksRotate","RowCharDemo","yLabelCustomWidth","xLabelCustomWidth","customToolTipFormat","labelWidth","valueLabelWidth","val","tooltipValueFormat","BarChartDemo","NumberChartDemo","useCustomLabel","useCustomValueFormat","color","App","padding","ReactDOM","render","document","getElementById","LetterWidths","letters","Array","letter","a","L","b","X","c","e","f","M","g","h","i","XS","j","S","k","l","m","XL","n","o","p","q","s","t","u","v","w","y","z","XAxis","props","axis","state","this","updateAxis","prevProps","selected","select","call","axisBottom","scale","tickSize","tickPadding","tickFormat","index","selectAll","attr","rotate","axisHeightUpdated","widths","nodes","getComputedTextLength","getLabelsMaxHeight","text","transform","ref","onMouseOver","getAttribute","setState","onMouseOut","reduce","all","current","fill","stroke","strokeWidth","strokeOpacity","fillOpacity","maxWidth","max","sin","abs","PI","YAxis","axisLeft","axisWidthUpdated","equal","curry","fn","args","length","secArgs","head","array","newArray","slice","unshift","tail","push","copied","prop","name","object","updateAt","maxProp","property","reduceAxisLabels","values","ticks","ceil","getColour","isFocused","isFiltered","hsl","darker","toString","tooltipFormat","formatters","formatter","focusedHOC","onFocus","focused","radius","min","getArc","arc","outerRadius","innerRadius","getPie","pie","cursor","className","defaultStyle","startAngle","endAngle","padAngle","spring","onClick","precision","circleSize","cx","cy","maxValue","leftLabelHeight","xScale","scaleLinear","range","domain","yScale","scaleBand","rangeRound","widthScaled","rowHeight","dy","textAnchor","leftAxisMaxWidth","setLeftAxisMaxWidth","bottomAxisMaxWidth","setBottomAxisMaxWidth","scaleX","scaleY","uniqueKey","heightFinal","bandwidth","onMouseEnter","onMouseLeave","he","bottomAxisHeightUpdated","we","axisUpdated","backgroundColor","lineHeight","Filter","handlePadding","focusedFrom","focusedTo","opacity","x2","x1","y1","y2","Focus","LineChart","svg","bottomAxisUpdated","bind","leftAxisUpdated","xAxisHeight","yAxisWidth","focusedX","focusedY","isFiltering","isExtending","isMoving","filterStart","filterEnd","filterFocused","filterFromFocused","filterToFocused","movingFromDiff","movingToDiff","extent","bottomLabelHeight","position","getBoundingClientRect","pageX","left","invert","mousePosition","bisectValue","bisector","d0","d1","focusedNode","realX","realFrom","realTo","valueLine","line","filterWidth","strokeLinejoin","strokeLinecap","FilterX","pointerEvents","onMouseMove","onMouseDown","onMouseUp","Wrapped"],"mappings":"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","file":"static/js/main.ecd9650d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps<T, D> {\n    title: string;\n    settings: T;\n    children: (settings: T, input: D) => any;\n    data: D;\n}\n\nconst DemoContainer = <T extends object, D extends object | number>({ children, title, settings, data }: IProps<T, D>) => {\n    const [changes, onChange] = React.useState<T>(settings);\n    const [input, setInput] = React.useState<D>(data);\n    const [isInvalid, setIsInvalid] = React.useState<boolean>(false);\n\n    return (\n        <div style={{ margin: '20px 0'}}>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <h2>{title}</h2>\n                    {Object.keys(changes).map(key => {\n                        const id = `${title}=${key}`;\n                        if (typeof changes[key] === 'number') {\n                            return (\n                                <div key={`${id}-key`}>\n\n                                    <input type=\"checkbox\" id={id} checked={!!changes[key]} onChange={({ target }) => onChange({ ...changes, [key]: target.checked ? settings[key]: 0 })} />\n\n\n                                    <label htmlFor={id}>{key}: </label>\n                                    {changes[key] !== 0 && <input type=\"number\" id={id} value={changes[key]} onChange={({ target }) => onChange({ ...changes, [key]: parseInt(target.value, 10) })} />}\n                                </div>\n                            )\n                        }\n\n\n                        return (\n                            <div key={`${id}-key`}>\n                                <input type=\"checkbox\" id={id} checked={changes[key]}\n                                       onChange={({ target }) => onChange({ ...changes, [key]: target.checked })} />\n                                <label htmlFor={id}>{key}</label>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div>\n                    {children(changes, input)}\n                </div>\n                <div>\n                    <textarea\n                        style={{ height: '100%' }}\n                        rows={10}\n                        cols={50}\n                        onChange={(event) => {\n                            try {\n                                const parsed = JSON.parse(event.target.value);\n                                setInput(parsed);\n                                setIsInvalid(false);\n                            } catch (error) {\n                                setIsInvalid(true);\n                            }\n                        }}\n                        defaultValue={JSON.stringify(data, null, 2)}\n                    />\n                    <div>{isInvalid && <span>invalid JSON</span>}</div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default DemoContainer;\n","import React from 'react';\nimport { DonutChart } from '../export';\nimport DemoContainer from '../DemoContainer';\nimport './DonutChart.css';\n\nconst data = [\n    {\n        label: \"male\",\n        value: 30,\n        colour: \"#88BB88\"\n    },\n    {\n        label: \"female\",\n        value: 60,\n        colour: \"#8888CC\"\n    },\n    {\n        label: \"unknown\",\n        value: 10,\n        colour: \"#AA8888\"\n    }\n];\n\nconst DonutChartDemo: React.FC = () => {\n    const [filters, setFilters] = React.useState<string[]>([]);\n\n    const filter = (label: string) => {\n        if (filters.find(r => r === label)) {\n            setFilters(filters.filter(d => d !== label));\n        } else {\n            setFilters([...filters, label]);\n        }\n    };\n\n    return (\n        <DemoContainer title=\"Donut chart\" settings={{ customValueFormat: true, filterable: true }} data={data}>\n            {(settings, input) => (\n                <>\n                    <DonutChart\n                        width={300}\n                        height={200}\n                        data={input}\n                        filters={settings.filterable ? filters :  undefined}\n                        onFilter={settings.filterable ? (label) => filter(label) : undefined}\n                        valueFormat={settings.customValueFormat ? (x) => `${Math.floor(x)}%` : undefined}\n\n                        // onMouseOver={(label) => this.setState({ focusedLabel: label })}\n                        // onMouseOut={(label) => this.setState({ focusedLabel: undefined })}\n                        // focusedLabel={this.state.focusedLabel}\n                    />\n                    <div>{settings.filterable && <pre>{JSON.stringify(filters)}</pre>}</div>\n                </>\n            )}\n        </DemoContainer>\n    )\n}\n\nexport default DonutChartDemo;\n","import React from 'react';\nimport { LineChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: 1,\n        value: 50,\n    },\n    {\n        key: 2,\n        value: 20,\n    },\n    {\n        key: 3,\n        value: 40,\n    },\n    {\n        key: 5,\n        value: 30,\n    },\n    {\n        key: 6,\n        value: 10,\n    }\n];\n\nconst LineChartDemo = () => {\n    const [filter, setFilter] = React.useState<any>({ from: 3, to: 5 });\n\n    return (\n        <div>\n            <DemoContainer title=\"Line chart\" settings={{ withXLabel: true, withYLabel: true, useKeyFormat: false, useFilters: true, xLabelRotate: false, xAxisTicksTooltip: false }} data={data}>\n                {(settings, input) => {\n                    return (\n                        <div>\n                            <LineChart\n                                data={input}\n                                height={300}\n                                width={500}\n                                yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                                xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                                colour=\"green\"\n                                onFilter={settings.useFilters ? ({ from, to }) => setFilter({ from, to }) : undefined}\n                                filterFrom={settings.useFilters ? filter.from : undefined}\n                                filterTo={settings.useFilters ? filter.to : undefined}\n                                keyFormat={settings.useKeyFormat ? (value) => `${value},-` : undefined}\n                                xAxisTicksRotate={settings.xLabelRotate ? -45 : undefined}\n                                xAxisTicksTooltip={settings.xAxisTicksTooltip}\n                            />\n                            {settings.useFilters && <pre>{JSON.stringify(filter)}</pre>}\n                        </div>\n                    )\n                }}\n            </DemoContainer>\n        </div>\n    )\n};\n\nexport default LineChartDemo;\n","import React from 'react';\nimport { RowChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: \"a\",\n        value: 50,\n    },\n    {\n        key: \"b\",\n        value: 20,\n    },\n    {\n        key: \"c\",\n        value: 40,\n    },\n    {\n        key: \"d\",\n        value: 10,\n    }\n];\n\n\nconst RowCharDemo: React.FC = () => {\n    const [filters, setFilter] = React.useState<string[]>([]);\n    return (\n        <DemoContainer\n            title=\"Row chart\"\n            data={data}\n            settings={{\n                withXLabel: true,\n                withYLabel: true,\n                filterable: true,\n                yLabelCustomWidth: 15,\n                xLabelCustomWidth: 100,\n                customValueFormat: false,\n                customToolTipFormat: false\n            }}>\n            {(settings, input) => (\n                <div>\n                    <RowChart\n                        data={input}\n                        width={400}\n                        yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                        xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                        colour=\"green\"\n                        onFilter={settings.filterable ? (filter) => setFilter([...filters, filter]) : undefined}\n                        filters={settings.filterable ? filters : undefined}\n                        labelWidth={settings.yLabelCustomWidth || undefined}\n                        valueLabelWidth={settings.xLabelCustomWidth || undefined}\n                        valueFormat={settings.customValueFormat ? (val) => `${val},-` : undefined}\n                        tooltipValueFormat={settings.customToolTipFormat ? (val) => `${val} custom tooltip` : undefined}\n                    />\n                    {settings.filterable && <pre>{JSON.stringify(filters)}</pre>}\n                </div>\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default RowCharDemo;\n","import React from 'react';\nimport { BarChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst BarChartDemo: React.FC = () => {\n\n    const data = [\n            { key: 'way toooo long name to show', value: 8 },\n            { key: 'another too long name', value: 10 },\n        ];\n\n    return (\n        <DemoContainer title=\"Bar chart\" settings={{ withXLabel: true, withYLabel: true, xLabelRotate: false, xAxisTicksTooltip: true }} data={data}>\n            {(settings, input) => (\n                <BarChart\n                    data={input}\n                    height={300}\n                    width={300}\n                    colour=\"green\"\n                    yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                    xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                    xAxisTicksRotate={settings.xLabelRotate ? -45 : undefined}\n                    xAxisTicksTooltip={settings.xAxisTicksTooltip}\n                />)}\n        </DemoContainer>\n    );\n};\n\nexport default BarChartDemo;\n","import * as React from \"react\";\nimport { NumberChart } from '../export';\nimport DemoContainer from '../DemoContainer';\nimport './demo.css';\n\nconst NumberChartDemo: React.FC = () => {\n\n    return (\n        <DemoContainer\n            title=\"Number chart\"\n            data={50}\n            settings={{ useCustomLabel: false, useCustomValueFormat: true }}\n        >\n            {(settings, input) => (\n                <NumberChart\n                    width={200}\n                    color=\"#88BB88\"\n                    value={input}\n                    label={settings.useCustomLabel ? 'custom label' : undefined}\n                    valueFormat={settings.useCustomValueFormat ? (val) => `${Math.floor(val)},-` : undefined}\n                />\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default NumberChartDemo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DonutChartDemo from './DonutChart/DonutChartDemo';\nimport LineChartDemo from './LineChart/LineChartDemo';\nimport RowCharDemo from './RowChart/RowCharDemo';\nimport BarChartDemo from './BarChart/BarChartDemo';\nimport NumberChartDemo from './NumberChart/NumberChartDemo';\n\nconst App = () => (\n    <div>\n        <div style={{ padding: '10px'}}>\n\n            <DonutChartDemo />\n\n            <LineChartDemo />\n\n            <RowCharDemo />\n\n            <BarChartDemo />\n\n            <NumberChartDemo />\n        </div>\n    </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import * as React from \"react\";\n\nimport { axisBottom, axisLeft, ScaleBand, ScaleLinear, select } from \"d3\";\nimport { max } from \"./utils\";\n\nconst letters = Array.from('ABCDEFGHIJKLMNOPQRSTUVWZ00000000000000000000000000000000000');\n\nenum LetterWidths {\n    XS = 4.45,\n    S = 5.39,\n    M = 6.13,\n    L = 7.11,\n    X = 8,\n    XL = 12\n}\n\nconst letter = {\n    a: LetterWidths.L,\n    b: LetterWidths.X,\n    c: LetterWidths.L,\n    d: LetterWidths.X,\n    e: LetterWidths.L,\n    f: LetterWidths.M,\n    g: LetterWidths.X,\n    h: LetterWidths.X,\n    i: LetterWidths.XS,\n    j: LetterWidths.S,\n    k: LetterWidths.X,\n    l: LetterWidths.XS,\n    m: LetterWidths.XL,\n    n: LetterWidths.X,\n    o: LetterWidths.X,\n    p: LetterWidths.X,\n    q: LetterWidths.X,\n    r: LetterWidths.S,\n    s: LetterWidths.M,\n    t: LetterWidths.XS,\n    u: LetterWidths.X,\n    v: LetterWidths.X,\n    w: LetterWidths.XL,\n    x: LetterWidths.X,\n    y: LetterWidths.X,\n    z: LetterWidths.L,\n}\n\nconst textWidth = (text: string) => Array.from(text).reduce<number>((all, current) => {\n    return all + (letter[current] || 8);\n}, 0);\n\ninterface XAxisProps {\n    scale: ScaleBand<string> | ScaleLinear<number, number>;\n    height: number;\n    tickFormat?: (value: string, index: number) => string;\n    rotate?: number;\n    axisHeightUpdated?: (labelMaxWidth: number) => void;\n    xAxisTicksTooltip?: boolean;\n}\n\nexport class XAxis extends React.Component<XAxisProps, { label?: string }> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    constructor(props: XAxisProps) {\n        super(props);\n        this.state = {\n            label: undefined,\n        }\n    }\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: XAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n\n\n        const tickFormat = (value: any, index: number): any => {\n            if (this.props.xAxisTicksTooltip) {\n                return letters[index]\n            }\n            if (this.props.tickFormat) {\n                return this.props.tickFormat(value, index)\n            }\n            return value;\n        }\n\n        if (!this.axis) {\n            return;\n        }\n\n        // @ts-ignore\n        const selected = select(this.axis).call(axisBottom(this.props.scale).tickSize(0).tickPadding(6).tickFormat(tickFormat));\n\n        if (this.props.xAxisTicksTooltip) {\n            selected.selectAll(\"g.tick text\").attr(\"label\", (d) => `${d}`)\n        }\n\n        if (this.props.rotate) {\n            selected.selectAll(\"g.tick text\")\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-10\")\n                .attr(\"dy\", \"0\")\n                .attr(\"transform\", `rotate(${this.props.rotate})`);\n\n            if (this.props.axisHeightUpdated) {\n                // @ts-ignore\n                const widths = selected.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n                this.props.axisHeightUpdated(this.getLabelsMaxHeight(widths));\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n            <g\n                transform={`translate(0,${this.props.height})`}\n                ref={(t) => (this.axis = t)}\n                onMouseOver={(e) => {\n                    if (this.props.xAxisTicksTooltip) {\n                        // @ts-ignore\n                        const label = e.target.getAttribute('label');\n                        this.setState({ label })\n                    }\n                }}\n                onMouseOut={() => this.setState({ label: undefined })}\n            />\n            {this.props.xAxisTicksTooltip && this.state.label && (\n                <g>\n                    <rect x={0} y={this.props.height - 22} height=\"20\" width={textWidth(this.state.label) + 8} style={{ fill: 'white', stroke: 'grey', strokeWidth: 1, strokeOpacity: 0.9, fillOpacity: 0.9, }} />\n                    <text x={4} y={this.props.height - 8}>{this.state.label}</text>\n                </g>\n            )}\n            </>\n        );\n    }\n\n    private getLabelsMaxHeight(widths: number[]): number {\n        const maxWidth = max(widths);\n        if (this.props.rotate) {\n            // calculate right height by sin(angle) * maxWidth\n            return Math.sin(Math.abs(this.props.rotate) * Math.PI / 180) * maxWidth;\n        }\n        return 0;\n    }\n}\n\ninterface YAxisProps {\n    scale: ScaleLinear<number, any | {}>;\n    axisWidthUpdated?: (labelMaxWidth: number) => void;\n    tickFormat?: (value: number) => string;\n}\n\nexport class YAxis extends React.Component<YAxisProps, {}> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: YAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        // @ts-ignore\n        const axis = select(this.axis).call(axisLeft(this.props.scale).tickFormat(this.props.tickFormat || null));\n\n        if (this.props.axisWidthUpdated) {\n            // @ts-ignore\n            const widths = axis.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n\n            this.props.axisWidthUpdated(max(widths));\n        }\n    }\n\n    public render() {\n        return <g ref={(t) => (this.axis = t)} />;\n    }\n}\n","import { hsl } from 'd3';\n\nconst equal = (a: any, b: any): boolean => a === b;\n\nexport const curry = (fn: (...x: any[]) => any) => {\n  const r = args => {\n    if (args.length >= fn.length) {\n      return fn(...args);\n    }\n    return (...secArgs) => r([...args, ...secArgs]);\n  };\n\n  return (...args) => r(args);\n};\n\nexport const prepend = curry((value: string, array: any[]): any[] => {\n  const newArray = array.slice();\n  newArray.unshift(value);\n  return newArray;\n});\n\nexport const head = (input: any) => input[0] || null;\n\nexport const tail = <T>(array: T[]): T[] => array.slice(1);\n\nexport const push = (value: any, array: any[]): any[] => {\n  const copied = array.slice();\n  copied.push(value);\n  return copied;\n};\n\nexport const prop = curry((name: string, object: object) => object[name]);\n\nexport const not = input => !input;\n\nexport const remove = curry((value: any, array: any[]): any[] => array.filter(x => !equal(x, value)));\n\ntype fnType = (x: any) => any;\n\nexport const compose = (...fns: fnType[]) => (value: any) => fns.reduceRight((args, fn) => fn(args), value);\n\nexport const updateAt = curry((index: number, value: any, array: any[]): any[] => {\n  if (array.length <= index) {\n    return updateAt(index, value, push(null, array));\n  }\n\n  return array.map((x, i) => (equal(i, index) ? value : x));\n});\n\nconst notNull = (value: any): boolean => value !== null;\n\nexport const isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport const makeEven = (valueToFill: any) => (array: any[]): any[] => (isOdd(array.length) ? push(valueToFill, array) : array);\n\nexport const join = (by: string) => array => array.map(a => (a.filter(notNull).length > 1 ? a.join(by) : null)).filter(notNull);\n\nconst reduce = (fn, array: number[]) => {\n  if (array.length === 0) {\n    return 0;\n  }\n  return array.reduce(fn);\n};\n\nexport const max = (array: number[]): number => reduce((a, b) => Math.max(a, b), array);\n// const min = (array: number[]): number => reduce((a, b) => Math.min(a, b), array);\n\nexport const maxProp = (property: string, array: object[]) => max(array.map(d => d[property]));\n\nexport const reduceAxisLabels = (width: number, values: string[]): ((label: string, index: number) => string) => {\n  const spaceForText = 15;\n  const ticks = width / spaceForText;\n\n  if (values.length > ticks) {\n    const x = Math.ceil(values.length / ticks);\n    return (label: string, index: number): string => (index % x === 0 ? label : '');\n  }\n  return (label: string, index: number): string => label;\n};\n\nexport const getColour = (colour: string, label?: string, filters: string[] = [], isFocused: boolean = false): string => {\n  const isFiltered = filters.length > 0;\n  if (isFiltered && !filters.find(f => f === label)) {\n    if (isFocused) {\n      return hsl('grey')\n        .darker(0.5)\n        .toString();\n    }\n    return 'grey';\n  }\n\n  if (isFocused) {\n    return hsl(colour)\n      .darker(0.5)\n      .toString();\n  }\n  return colour;\n};\n\nexport type Optional<T> = T | undefined;\n\n/**\n * @param {number} value\n * @param {(value: number) => string[]} formatters needs to be in order in which we want to format the {value} first\n * @returns {string}\n */\nexport const tooltipFormat = (value: number, ...formatters: Array<Optional<(value: number) => string>>): string => {\n  if (formatters.length === 0) {\n    return `${value}`;\n  }\n  const formatter = head(formatters);\n  return formatter ? formatter(value) : tooltipFormat(value, ...tail(formatters));\n};\n","import { arc, pie } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\nimport { IDonutChart, IDonutChartData } from '../interfaces';\n\nconst DonutChart = ({\n                        data = [],\n                        width,\n                        height,\n                        filters = [],\n                        onFilter,\n                        onFocus,\n                        focused,\n                        children,\n                        valueFormat,\n                        tooltipValueFormat,\n                    }: IDonutChart & InjectedProps) => {\n    const radius = Math.min(width, height) / 2;\n\n    const getArc: any = arc()\n        .outerRadius(radius)\n        .innerRadius(radius - (radius / 5));\n\n    const getPie = pie<IDonutChartData>().value((d: IDonutChartData): number => d.value);\n\n    const cursor = onFilter ? \"pointer\" : \"default\";\n\n    return (\n        <div className=\"DonutChart\" style={{ width }}>\n            <svg width={width} height={height}>\n                <g transform={`translate(${width / 2}, ${height / 2})`}>\n                    {getPie(data)\n                        .filter((d) => !!d.data.colour)\n                        .map((slice) => (\n                            <Motion\n                                key={`${slice.data.label}-${slice.data.value}`}\n                                defaultStyle={{\n                                    startAngle: slice.startAngle,\n                                    endAngle: slice.endAngle,\n                                    padAngle: slice.padAngle,\n                                }}\n                                style={{\n                                    startAngle: spring(slice.startAngle),\n                                    endAngle: spring(slice.endAngle),\n                                    padAngle: spring(slice.padAngle),\n                                }}\n                            >\n                                {(value) => (\n                                    <g>\n                                        <path\n                                            fill={getColour(slice.data.colour, slice.data.label, filters, slice.data.label === focused)}\n                                            d={getArc(value)}\n                                            stroke=\"white\"\n                                            strokeWidth={1}\n                                            cursor={cursor}\n                                            onClick={\n                                                onFilter\n                                                    ? (event) => onFilter(slice.data.label)\n                                                    : undefined\n                                            }\n                                            onMouseOver={() => onFocus(slice.data.label || undefined)}\n                                            onMouseOut={() => onFocus(undefined)}\n                                        />\n                                        <title>\n                                            {`${slice.data.label ? `${slice.data.label}: ` : \"\"}${tooltipFormat(slice.data.value, tooltipValueFormat, valueFormat)}` }\n                                        </title>\n                                    </g>\n                                )}\n                            </Motion>\n                        ))}\n                    {children}\n                </g>\n            </svg>\n\n            <div className=\"legend\">\n                {data.filter((d) => !!d.label).map(({ label, value, colour }, index) => (\n                    <Motion\n                        key={label}\n                        defaultStyle={{ x: 0 }}\n                        style={{ x: spring(value, { precision: 10 }) }}\n                    >\n                        {(val) => {\n                            const circleSize = label === focused ? 10 : 6;\n                            return (\n                                <div\n                                    onClick={onFilter ? () => onFilter(label) : undefined}\n                                    onMouseOver={() => onFocus(label || undefined)}\n                                    onMouseOut={() => onFocus(undefined)}\n                                    className=\"label\"\n                                    style={{ cursor }}\n                                >\n                                    <div className=\"legend-item\">\n                                        <svg height=\"20\" width=\"20\">\n                                            <Motion\n                                                defaultStyle={{ x: 0 }}\n                                                style={{ x: spring(circleSize) }}\n                                            >\n                                                {({ x }) => (\n                                                    <circle cx=\"10\" cy=\"10\" r={x} fill={colour} />\n                                                )}\n                                            </Motion>\n                                        </svg>\n                                        <div>{label}</div>\n                                        <div>{valueFormat ? valueFormat(val.x) : val.x}</div>\n                                    </div>\n                                </div>\n                            );\n                        }}\n                    </Motion>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default focusedHOC(DonutChart);\n","import { scaleBand, scaleLinear } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { maxProp } from \"../utils\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\nimport { IRowChart } from '../interfaces';\n\nconst RowChart: React.FC<IRowChart & InjectedProps> = ({ data = [], width, filters = [], focused, onFilter, onFocus, colour, valueFormat, tooltipValueFormat, labelWidth = 80, valueLabelWidth = 40, xAxisLabel, yAxisLabel }) => {\n    const rowHeight = 40;\n    const height = rowHeight * data.length;\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const w = width - margin.left - margin.right;\n    const maxValue = maxProp(\"value\", data);\n    const labelsHeight = 20;\n    const labelBottomPadding = 4;\n    const valueLabelLeftPadding = 5;\n\n    const leftAxisMaxWidth = 0;\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n\n    const xScale = scaleLinear()\n        .range([0, w - labelWidth - valueLabelWidth - valueLabelLeftPadding])\n        .domain([0, maxValue]);\n\n    const yScale = scaleBand()\n        .rangeRound([0, height - margin.top - margin.bottom])\n        .domain(data.map((d) => d.key));\n\n    return (\n        <svg width={width} height={height} className=\"RowChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                {data.map((d) => {\n                    const y = yScale(d.key) || 0;\n                    return (\n                        <g\n                            key={d.key}\n                            cursor={onFilter ? \"pointer\" : \"default\"}\n                            onClick={onFilter ? (event) => onFilter(d.key) : undefined}\n                            onMouseOver={(event) => onFocus(d.key)}\n                            onMouseOut={(event) => onFocus(undefined)}\n                        >\n                            <Motion\n                                defaultStyle={{ width: 0 }}\n                                style={{ width: spring(d.value) }}\n                            >\n                                {(style) => {\n                                    const widthScaled = xScale(style.width);\n                                    return (\n                                        <rect\n                                            fill={getColour(colour, d.key, filters, focused === d.key)}\n                                            x={labelWidth}\n                                            y={y}\n                                            width={widthScaled > 0 ? widthScaled : 0}\n                                            height={rowHeight / 2}\n                                        />\n                                    );\n                                }}\n                            </Motion>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={0}>{d.key}</text>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={xScale(maxValue) + labelWidth + valueLabelLeftPadding}>\n                                {valueFormat ? valueFormat(d.value) : d.value}\n                            </text>\n\n                            <title>\n                                {`${d.key}: ${tooltipFormat(d.value, tooltipValueFormat, valueFormat)}`}\n                            </title>\n                        </g>\n                    );\n                })}\n\n                {xAxisLabel ? (<text className=\"RowChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\" textAnchor=\"middle\">{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (<text className=\"RowChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth} dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text>) : null}\n\n            </g>\n        </svg>\n    );\n};\n\nexport default focusedHOC(RowChart);\n","import * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { scaleBand, scaleLinear } from \"d3\";\n\nimport { getColour, maxProp, prop, reduceAxisLabels, tooltipFormat } from \"../utils\";\nimport { XAxis, YAxis } from \"../Axis\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { IBarChart } from '../interfaces';\n\nconst BarChart: React.FC<IBarChart & InjectedProps> = ({ width, height, data, filters, colour, focused, valueFormat, tooltipValueFormat, onFilter, onFocus, xAxisTicksRotate, xAxisLabel, yAxisLabel, xAxisTicksTooltip }) => {\n    const [leftAxisMaxWidth, setLeftAxisMaxWidth] = React.useState(0);\n    const [bottomAxisMaxWidth, setBottomAxisMaxWidth] = React.useState(0);\n\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n    const bottomLabelHeight = xAxisLabel ? 19 : 0;\n    const w = width - margin.left - margin.right - leftAxisMaxWidth - tickPadding - leftLabelHeight;\n    const h = height - margin.top - margin.bottom - bottomAxisMaxWidth - tickPadding - bottomLabelHeight;\n    const keys = data.map(prop(\"key\")) as string[];\n\n    const scaleX = scaleBand()\n        .range([0, w])\n        .padding(0.1)\n        .domain(keys);\n\n    const scaleY = scaleLinear()\n        .range([h, 0])\n        .domain([0, maxProp(\"value\", data)]);\n\n    const axisUpdated = (width: number) => {\n        if (leftAxisMaxWidth !== width) {\n            setLeftAxisMaxWidth(width)\n        }\n    };\n\n    const bottomAxisHeightUpdated = (height: number) => {\n        if (bottomAxisMaxWidth !== height) {\n            setBottomAxisMaxWidth(height)\n        }\n    };\n\n    return (\n        <svg width={width} height={height} className=\"BarChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                {data.map(({ key, value, uniqueKey }) => (\n                    <g key={uniqueKey || `${key}-${value}`}>\n                        <Motion defaultStyle={{ x: h }} style={{ x: spring(scaleY(value)) }}>\n                            {({ x }) => {\n                                const heightFinal = h - x;\n                                return (\n                                    <rect\n                                        x={scaleX(key)}\n                                        y={x}\n                                        cursor={onFilter ? \"pointer\" : \"default\"}\n                                        width={scaleX.bandwidth()}\n                                        height={heightFinal > 0 ? heightFinal : 0}\n                                        fill={getColour(colour, key, filters, focused === key)}\n                                        onClick={onFilter ? () => onFilter(key) : undefined}\n                                        onMouseEnter={() => onFocus(key)}\n                                        onMouseLeave={() => onFocus(undefined)}\n                                    />\n                                );\n                            }}\n                        </Motion>\n\n                        <title>\n                            {`${key}: ${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}\n                        </title>\n                    </g>\n                ))}\n\n                <XAxis\n                    height={h}\n                    scale={scaleX}\n                    rotate={xAxisTicksRotate}\n                    tickFormat={reduceAxisLabels(w, keys)}\n                    axisHeightUpdated={(he) => bottomAxisHeightUpdated(he)}\n                    xAxisTicksTooltip={xAxisTicksTooltip}\n                />\n                <YAxis scale={scaleY} tickFormat={valueFormat} axisWidthUpdated={(we) => axisUpdated(we)} />\n\n                {xAxisLabel ? (<text className=\"BarChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\"\n                                     textAnchor=\"middle\">{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (\n                    <text className=\"BarChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth}\n                          dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text>) : null}\n            </g>\n        </svg>\n    );\n}\n\nexport default focusedHOC(BarChart);\n","import * as React from \"react\";\nimport { Motion, spring } from 'react-motion';\n\nimport focusedHOC from \"../focusedHOC\";\nimport { tooltipFormat } from \"../utils\";\nimport { INumberChart } from '../interfaces';\n\nconst NumberChart: React.FC<INumberChart> = ({ value, label, valueFormat, tooltipValueFormat, width , color, children }) => {\n    return (\n        <div\n            className=\"NumberChart\"\n            title={`${label ? `${label}: ` : \"\"}${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}\n            style={{ width: `${width}px`, height: `${width}px`, backgroundColor: color, lineHeight: `${width}px` }}\n        >\n            {children}\n\n            <Motion\n                key={label}\n                defaultStyle={{ x: 0 }}\n                style={{ x: spring(value, { precision: 10 }) }}\n            >\n                {(val) => <div className=\"value\">{valueFormat ? valueFormat(val.x) : val.x}</div>}\n            </Motion>\n        </div>\n    );\n};\n\nexport default focusedHOC(NumberChart);\n","export { default as DonutChart } from './DonutChart/DonutChart';\nexport { default as RowChart } from './RowChart/RowChart';\nexport { default as BarChart } from './BarChart/BarChart';\nexport { default as LineChart } from './LineChart/LineChart';\nexport { default as NumberChart } from './NumberChart/NumberChart';\n\nexport * from './interfaces';\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  width: number;\n  x: number;\n  colour: string;\n  handlePadding: number;\n\n  focusedFrom: boolean;\n  focusedTo: boolean;\n}\n\nconst Filter = ({\n  height,\n  width,\n  x,\n  colour,\n  handlePadding,\n  focusedFrom,\n  focusedTo,\n}: Props) => {\n  const strokeWidth = handlePadding * 2;\n  return (\n    <g>\n      <rect\n        x={x}\n        y={0}\n        width={width}\n        height={height}\n        cursor=\"move\"\n        fill={colour}\n        opacity={0.5}\n      />\n      <line\n        x2={x}\n        x1={x}\n        y1={0}\n        y2={height}\n        stroke={focusedFrom ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n      <line\n        x2={x + width}\n        x1={x + width}\n        y1={0}\n        y2={height}\n        stroke={focusedTo ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n    </g>\n  );\n};\n\nexport default Filter;\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  x: number;\n  y: number;\n}\n\nconst Focus = ({ height, x, y }: Props) => (\n  <g>\n    <line x1={0} x2={x} y1={y} y2={y} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <line x1={x} x2={x} y1={y} y2={height} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <circle r={4} cx={x} cy={y} />\n  </g>\n);\n\nexport default Focus;\n","import * as React from \"react\";\n\nimport { bisector, extent, line, scaleLinear, } from \"d3\";\n\nimport { XAxis, YAxis } from \"../Axis\";\nimport FilterX from \"./FilterX\";\nimport Focus from \"./Focus\";\nimport { ILineChart, ILineChartData } from '../interfaces';\n\nconst margin = { top: 10, right: 10, bottom: 20, left: 20 };\n\nconst filterHandlePadding = 2; // px\n\ninterface State {\n    xAxisHeight: number;\n    yAxisWidth: number;\n\n    focusedX: number;\n    focusedY: number;\n\n    isFocused: boolean;\n    isFiltering: boolean;\n    isExtending: boolean;\n    isMoving: boolean;\n\n    filterStart?: number;\n    filterEnd?: number;\n\n    filterFocused: boolean;\n    filterFromFocused: boolean;\n    filterToFocused: boolean;\n\n    movingFromDiff?: number;\n    movingToDiff?: number;\n}\n\nclass LineChart extends React.Component<ILineChart, State> {\n    private svg = React.createRef<any>();\n\n    constructor(props: ILineChart) {\n        super(props);\n        this.bottomAxisUpdated = this.bottomAxisUpdated.bind(this);\n        this.leftAxisUpdated = this.leftAxisUpdated.bind(this);\n\n        this.state = {\n            xAxisHeight: 0,\n            yAxisWidth: 0,\n\n            focusedX: 0,\n            focusedY: 0,\n\n            isFocused: false,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n\n            filterStart: 0,\n            filterEnd: 0,\n\n            filterFocused: false,\n            filterFromFocused: false,\n            filterToFocused: false,\n\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        };\n    }\n\n    public scaleX() {\n        const leftLabelHeight = this.state.yAxisWidth ? 19 : 0;\n        const w = this.props.width - margin.left - margin.right - this.state.yAxisWidth - leftLabelHeight;\n\n        return scaleLinear()\n            .rangeRound([0, w])\n            .domain(extent(this.props.data, (d) => d.key) as number[]);\n    }\n\n    public scaleY() {\n        const bottomLabelHeight = this.props.xAxisLabel ? 19 : 0;\n        const h = this.props.height - margin.top - margin.bottom - this.state.xAxisHeight - bottomLabelHeight;\n        return scaleLinear()\n            .rangeRound([h, 0])\n            .domain(extent(this.props.data, (d) => d.value) as number[]);\n    }\n\n    public mousePosition(event: MouseEvent) {\n        const position = this.svg.current.getBoundingClientRect();\n        const leftLabelHeight = this.state.yAxisWidth ? 19 : 0;\n        const x = event.pageX - margin.left - this.state.yAxisWidth - position.left - leftLabelHeight;\n\n        return this.scaleX().invert(x);\n    }\n\n    public onMouseMove(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.isMoving) {\n            this.setState({\n                filterStart: x - (this.state.movingFromDiff || 0),\n                filterEnd: x + (this.state.movingToDiff || 0),\n            });\n        } else if (this.state.isExtending) {\n            this.setState({\n                filterEnd: x,\n            });\n        } else if (this.state.isFiltering) {\n            this.setState({\n                filterEnd: x,\n                filterToFocused: true,\n            });\n        } else if (this.state.isFocused) {\n            const { data } = this.props;\n\n            const bisectValue = bisector<ILineChartData, number>((d) => d.key).left;\n\n            const i = bisectValue(data, x);\n            const d0 = data[i - 1];\n            const d1 = data[i];\n\n            if (!d0) {\n                return;\n            }\n            if (!d1) {\n                return;\n            }\n\n            const focusedNode = x - d0.key > d1.key - x ? d1 : d0;\n\n            const scaleX = this.scaleX();\n            const realX = scaleX(x);\n\n            let filterFocused = false;\n            let filterToFocused = false;\n            let filterFromFocused = false;\n            if (this.props.filterFrom && this.props.filterTo) {\n                const realFrom = scaleX(this.props.filterFrom);\n                const realTo = scaleX(this.props.filterTo);\n\n                if (\n                    realX - filterHandlePadding < realTo &&\n                    realTo < realX + filterHandlePadding\n                ) {\n                    filterToFocused = true;\n                } else if (\n                    realX - filterHandlePadding < realFrom &&\n                    realFrom < realX + filterHandlePadding\n                ) {\n                    filterFromFocused = true;\n                } else if (\n                    realFrom + filterHandlePadding <= realX &&\n                    realX <= realTo - filterHandlePadding\n                ) {\n                    filterFocused = true;\n                }\n            }\n\n            this.setState({\n                focusedX: scaleX(focusedNode.key),\n                focusedY: this.scaleY()(focusedNode.value),\n                filterFocused,\n                filterFromFocused,\n                filterToFocused,\n            });\n        }\n    }\n\n    public onMouseDown(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.filterFocused) {\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isMoving: true,\n                movingFromDiff: x - (this.props.filterFrom || 0),\n                movingToDiff: (this.props.filterTo || 0) - x,\n                isFocused: false,\n            });\n        } else if (this.state.filterToFocused) {\n            // extending from Right\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else if (this.state.filterFromFocused) {\n            // extending from Left\n            this.setState({\n                filterStart: this.props.filterTo,\n                filterEnd: this.props.filterFrom,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else {\n            // filtering\n            this.setState({\n                filterStart: x,\n                filterEnd: x,\n                isFiltering: true,\n                isFocused: false,\n            });\n        }\n    }\n\n    public onMouseUp() {\n        if (this.props.onFilter) {\n            const { filterStart, filterEnd } = this.state;\n\n            let from = filterStart;\n            let to = filterEnd;\n            if (filterStart && filterEnd && filterStart > filterEnd) {\n                from = filterEnd;\n                to = filterStart;\n            } else if (from === to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            if (!from || !to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            this.props.onFilter({ from, to });\n        }\n\n        this.setState({\n            filterStart: undefined,\n            filterEnd: undefined,\n            isFocused: true,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        });\n    }\n\n    public cursor() {\n        if (!this.props.onFilter) {\n            return \"default\";\n        }\n        if (this.state.filterFocused) {\n            return \"move\";\n        }\n\n        if (this.state.filterFromFocused) {\n            return \"ew-resize\";\n        }\n\n        if (this.state.filterToFocused) {\n            return \"ew-resize\";\n        }\n        return \"crosshair\";\n    }\n\n    private bottomAxisUpdated(height: number) {\n        if (this.state.xAxisHeight !== height) {\n            this.setState({ xAxisHeight: height })\n        }\n    }\n\n    private leftAxisUpdated(width: number) {\n        if (this.state.yAxisWidth !== width) {\n            this.setState({ yAxisWidth: width })\n        }\n    }\n\n    public render() {\n        const { data, width, height, xAxisLabel, yAxisLabel, valueFormat, keyFormat, colour, xAxisTicksTooltip } = this.props;\n        const leftLabelHeight = yAxisLabel ? 19 : 0;\n        const bottomLabelHeight = xAxisLabel ? 19 : 0;\n        const h = height - margin.top - margin.bottom - this.state.xAxisHeight - bottomLabelHeight;\n        const scaleX = this.scaleX();\n\n        const valueLine: any = line()\n            .x((d: any) => scaleX(d.key))\n            .y((d: any) => this.scaleY()(d.value));\n\n        const filterFrom = this.props.filterFrom || 0;\n        const filterTo = this.props.filterTo || 0;\n\n        let filterStart = scaleX(Math.min(filterFrom, filterTo));\n        let filterWidth = Math.abs(scaleX(filterFrom) - scaleX(filterTo));\n\n        if (\n            this.state.isFiltering ||\n            this.state.isExtending ||\n            this.state.isMoving\n        ) {\n            filterStart = scaleX(\n                Math.min(this.state.filterStart || 0, this.state.filterEnd || 0),\n            );\n            filterWidth =\n                this.state.filterEnd === 0\n                    ? 0\n                    : Math.abs(\n                    scaleX(this.state.filterStart || 0) -\n                    scaleX(this.state.filterEnd || 0),\n                    );\n        }\n\n        const isFiltered = this.state.isFiltering || this.state.isExtending || filterFrom;\n\n        return (\n            <svg width={width} height={height} ref={this.svg}>\n                <g transform={`translate(${margin.left + this.state.yAxisWidth + leftLabelHeight}, ${margin.top})`}>\n                    <XAxis\n                        height={h}\n                        scale={this.scaleX()}\n                        tickFormat={keyFormat}\n                        rotate={this.props.xAxisTicksRotate}\n                        axisHeightUpdated={this.bottomAxisUpdated}\n                        xAxisTicksTooltip={xAxisTicksTooltip}\n                    />\n                    <YAxis\n                        scale={this.scaleY()}\n                        tickFormat={valueFormat}\n                        axisWidthUpdated={this.leftAxisUpdated}\n                    />\n\n                    <path\n                        d={valueLine(data)}\n                        fill=\"none\"\n                        stroke={colour}\n                        strokeWidth={1.5}\n                        strokeLinejoin=\"round\"\n                        strokeLinecap=\"round\"\n                    />\n\n                    {this.state.isFocused ? (\n                        <Focus x={this.state.focusedX} y={this.state.focusedY} height={h} />) : null}\n                    {isFiltered ? (\n                        <FilterX\n                            height={h}\n                            x={filterStart}\n                            width={filterWidth}\n                            colour={colour}\n                            handlePadding={filterHandlePadding}\n                            focusedFrom={this.state.filterFromFocused}\n                            focusedTo={this.state.filterToFocused}\n                        />\n                    ) : null}\n\n                    <rect\n                        fill=\"none\"\n                        pointerEvents=\"all\"\n                        cursor={this.cursor()}\n                        width={width - margin.left - margin.right - this.state.yAxisWidth - leftLabelHeight}\n                        height={height - margin.top - margin.bottom - bottomLabelHeight}\n                        onMouseMove={(event: any) => this.onMouseMove(event)}\n                        onMouseOut={() => this.setState({ isFocused: false })}\n                        onMouseOver={() => this.setState({ isFocused: true })}\n                        onMouseDown={(event: any) => this.props.onFilter ? this.onMouseDown(event) : null}\n                        onMouseUp={(event: any) => this.props.onFilter ? this.onMouseUp() : null}\n                    />\n\n                    {xAxisLabel ? <text transform={`translate(${width / 2}, ${height})`} dy=\"-1em\"\n                                        textAnchor=\"middle\">{xAxisLabel}</text> : null}\n\n                    {yAxisLabel ? <text transform=\"rotate(-90)\" y={-this.state.yAxisWidth} x={-(height / 2)} dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text> : null}\n\n                </g>\n            </svg>\n        );\n    }\n}\n\nexport default LineChart;\n","import * as React from \"react\";\n\nexport interface InjectedProps {\n  focused?: string;\n  onFocus: (label: string | undefined) => void;\n}\n\ninterface State {\n  focused?: string;\n}\n\nfunction focusedHOC<P>(Wrapped: React.ComponentClass<P & InjectedProps> | React.StatelessComponent<P & InjectedProps>): React.ComponentClass<P> {\n  return class extends React.Component<P, State> {\n    constructor(props: P) {\n      super(props);\n      this.state = {\n        focused: undefined,\n      };\n    }\n\n    public render() {\n      return (\n        <Wrapped\n          {...this.props}\n          onFocus={(focused) => this.setState({ focused })}\n          focused={this.state.focused}\n        />\n      );\n    }\n  };\n}\n\nexport default focusedHOC;\n"],"sourceRoot":""}