{"version":3,"sources":["Demo.tsx","index.tsx","components/fields/Input.tsx","components/fields/Textarea.tsx","components/fields/Checkbox.tsx","components/fields/Select.tsx","components/fields/Button.tsx","components/fields/Submit.tsx","components/fields/Group.tsx","components/Label.tsx","components/ErrorMessage.tsx","components/Form.tsx","export.ts"],"names":["fields1","name","label","type","validation","rules","message","value","legend","fields","fields2","fields3","options","submit","props","style","margin","Demo","React","onFieldsChange","onClick","display","justifyContent","borderTop","padding","id","onSubmit","formData","console","log","onButtonClick","field","fs","customComponents","borderLeft","JSON","stringify","getFormData","ReactDOM","document","getElementById","Input","ref","fieldId","isRequired","placeholder","Date","toISOString","disabled","onChange","e","update","target","groupName","onBlur","validate","inputMode","errorMessage","Textarea","defaultValue","Checkbox","defaultChecked","event","updateAndValidate","checked","Select","map","option","key","Button","Submit","Group","children","Asterisk","title","aria-hidden","Label","htmlFor","ErrorMessage","className","Form","inputRefs","resolveFocusedField","focused","shouldComponentFocus","current","focus","thisUpdate","thisValidate","thisUpdateAndValidate","thisOnButtonClick","getComponent","component","c","preventDefault","validated","validateForm","hasError"],"mappings":"2MAOA,MAAMA,EAAuB,CAC3B,CACEC,KAAM,OACNC,MAAO,OACPC,KAAM,OACNC,WAAY,CACV,CACED,KAAM,WACNE,MAAO,CACL,CACEC,QAAS,+BAMnB,CACEL,KAAM,SACNC,MAAO,iBACPC,KAAM,UAER,CACEF,KAAM,QACNE,KAAM,WACND,MAAO,WAET,CACED,KAAM,cACNE,KAAM,WACNI,MAAO,aAET,CACEJ,KAAM,QACNF,KAAM,cACNO,OAAQ,eACRC,OAAQ,CACN,CACER,KAAM,gBACNC,MAAO,gBACPC,KAAM,UAER,CACEA,KAAM,OACNF,KAAM,eACNC,MAAO,eACPE,WAAY,CACV,CACED,KAAM,WACNE,MAAO,CACL,CACEC,QAAS,2CAQvB,CACEL,KAAM,SACNE,KAAM,WAIJO,EAAuB,CAC3B,CACET,KAAM,OACNC,MAAO,OACPC,KAAM,OACNI,MAAO,UAET,CACEN,KAAM,SACNE,KAAM,WAIJQ,EAAuB,CAC3B,CACEV,KAAM,OACNC,MAAO,OACPC,KAAM,OACNI,MAAO,UAET,CACEN,KAAM,SACNE,KAAM,SACNS,QAAS,CAAC,CAAEL,MAAO,SAAW,CAAEA,MAAO,EAAGL,MAAO,YAEnD,CACED,KAAM,SACNE,KAAM,WAIJU,EAAUC,GACd,0BAAQX,KAAK,SAASY,MAAO,CAAEC,OAAQ,WACpCF,EAAMZ,MADT,uBAiCae,MA5BF,KAAO,MAAD,EACgBC,WAA4BP,GAD5C,mBACVF,EADU,KACFU,EADE,KAGjB,OACE,2BACE,0BAAQC,QAAS,IAAMD,EAAenB,IAAtC,UACA,0BAAQoB,QAAS,IAAMD,EAAeT,IAAtC,UACA,0BAAQU,QAAS,IAAMD,EAAeR,IAAtC,UAEA,uBAAKI,MAAO,CAAEM,QAAS,OAAQC,eAAgB,gBAAiBC,UAAW,cACzE,uBAAKR,MAAO,CAAES,QAAS,SACrB,gBAAC,UAAD,CACEC,GAAG,YACHhB,OAAQA,EACRU,eAAgBA,EAChBO,SAAUC,GAAYC,QAAQC,IAAI,WAAYF,GAC9CG,cAAe,CAACC,EAAOC,IAAOJ,QAAQC,IAAI,gBAAiBE,EAAOC,GAClEC,iBAAkB,CAAEpB,OAAF,MAGtB,uBAAKE,MAAO,CAAES,QAAS,OAAQU,WAAY,cACzC,2BAAMC,KAAKC,UAAUC,sBAAY5B,GAAS,KAAM,QC7H1D6B,SAAgB,gBAAC,EAAD,MAAUC,SAASC,eAAe,U,+DCkCnCC,MArBDvB,aAAiB,CAACJ,EAAmB4B,KACjD,OACE,2BACG5B,EAAMZ,OAAS,gBAAC,EAAD,CAAOyC,QAAS7B,EAAMb,KAAMC,MAAOY,EAAMZ,MAAO0C,WAAYA,qBAAW9B,EAAMV,cAC7F,yBACEsC,IAAKA,EACLjB,GAAIX,EAAMb,KACVE,KAAMW,EAAMX,KACZF,KAAMa,EAAMb,KACZ4C,YAAa/B,EAAM+B,YACnBtC,OAtBUA,EAsBMO,EAAMP,MArBxBA,aAAiBuC,KACZvC,EAAMwC,cAGM,mBAAVxC,EACFA,EAAQ,OAAS,QAGnBA,GAAS,IAcVyC,SAAUlC,EAAMkC,SAChBC,SAAUC,GAAKpC,EAAMqC,OAAO,CAAElD,KAAMa,EAAMb,KAAMM,MAAO2C,EAAEE,OAAO7C,MAAO8C,UAAWvC,EAAMuC,YACxFC,OAAQ,IAAMxC,EAAMyC,SAAS,CAAEtD,KAAMa,EAAMb,OAC3CuD,UAAW1C,EAAM0C,YAElB1C,EAAM2C,aAAe,gBAAC,EAAD,CAAcnD,QAASQ,EAAM2C,eAAmB,MA5B1DlD,QCqBHmD,MArBExC,aAAiB,CAACJ,EAAsB4B,KAAyC,MACxFxC,EAAqGY,EAArGZ,MAAOD,EAA8Fa,EAA9Fb,KAAMG,EAAwFU,EAAxFV,WAAYyC,EAA4E/B,EAA5E+B,YAAatC,EAA+DO,EAA/DP,MAAOyC,EAAwDlC,EAAxDkC,SAAUG,EAA8CrC,EAA9CqC,OAAQI,EAAsCzC,EAAtCyC,SAAUF,EAA4BvC,EAA5BuC,UAAWI,EAAiB3C,EAAjB2C,aAE5F,OACE,2BACGvD,EAAQ,gBAAC,EAAD,CAAOyC,QAAS1C,EAAMC,MAAOA,EAAO0C,WAAYA,qBAAWxC,KAAkB,KACtF,4BACEsC,IAAKA,EACLjB,GAAIxB,EACJA,KAAMA,EACN4C,YAAaA,EACbc,aAAcpD,EACdyC,SAAUA,EACVC,SAAUC,GAAKC,EAAO,CAAElD,OAAMM,MAAO2C,EAAEE,OAAO7C,MAAO8C,cACrDC,OAAQ,IAAMC,EAAS,CAAEtD,WAE1BwD,EAAe,gBAAC,EAAD,CAAcnD,QAASmD,IAAmB,QCIjDG,MApBE1C,aAAiB,CAACJ,EAAsB4B,IAErD,2BACG5B,EAAMZ,OAAS,gBAAC,EAAD,CAAOyC,QAAS7B,EAAMb,KAAMC,MAAOY,EAAMZ,MAAO0C,WAAYA,qBAAW9B,EAAMV,cAC7F,yBACEsC,IAAKA,EACLjB,GAAIX,EAAMb,KACVA,KAAMa,EAAMb,KACZE,KAAK,WACL6C,SAAUlC,EAAMkC,SAChBa,eAAgB/C,EAAMP,QAAS,EAC/B0C,SAAUa,GACRhD,EAAMiD,kBAAkB,CAAE9D,KAAMa,EAAMb,KAAMM,MAAOuD,EAAMV,OAAOY,QAASX,UAAWvC,EAAMuC,cAG7FvC,EAAM2C,aAAe,gBAAC,EAAD,CAAcnD,QAASQ,EAAM2C,eAAmB,OCW7DQ,MA1BA/C,aAAiB,CAACJ,EAAoB4B,IAEjD,2BACG5B,EAAMZ,OAAS,gBAAC,EAAD,CAAOyC,QAAS7B,EAAMb,KAAMC,MAAOY,EAAMZ,MAAO0C,WAAYA,qBAAW9B,EAAMV,cAC7F,0BACEsC,IAAKA,EACLjB,GAAIX,EAAMb,KACVA,KAAMa,EAAMb,KACZ+C,SAAUlC,EAAMkC,SAChBW,aAAc7C,EAAMP,OAAS,GAC7B0C,SAAUa,GACRhD,EAAMiD,kBAAkB,CAAE9D,KAAMa,EAAMb,KAAMM,MAAOuD,EAAMV,OAAO7C,MAAO8C,UAAWvC,EAAMuC,aAGzFvC,EAAM+B,YAAc,0BAAQtC,MAAM,IAAIO,EAAM+B,aAAwB,MACnE/B,EAAMF,SAAW,IAAIsD,IAAIC,GACzB,0BAAQ5D,MAAO4D,EAAO5D,MAAO6D,IAAKD,EAAO5D,OACtC4D,EAAOjE,OAASiE,EAAO5D,SAI7BO,EAAM2C,aAAe,gBAAC,EAAD,CAAcnD,QAASQ,EAAM2C,eAAmB,OCjB7DY,MANuB,EAAGnE,QAAOD,OAAM+C,WAAUlB,mBAC9D,0BAAQkB,SAAUA,EAAU/C,KAAMA,EAAME,KAAK,SAASiB,QAASU,GAC5D5B,GCIUoE,MANA,EAAGpE,QAAOD,OAAM+C,cAC7B,0BAAQA,SAAUA,EAAU/C,KAAMA,EAAME,KAAK,UAC1CD,GAAS,UCSCqE,MATgB,EAAG/D,SAAQgE,cAEtC,2BACE,2BAAMhE,GAAkB,MACvBgE,GCPP,MAAMC,EAAW,IACf,wBAAMC,MAAM,yBAAyBC,cAAY,QAC9C,IADH,KAqBaC,MARD,EAAGjC,UAASzC,QAAO0C,aAAY4B,cAC3C,yBAAOK,QAASlC,GACbzC,EACA0C,GAAc,gBAAC6B,EAAD,MACdD,GCZUM,MAFM,EAAGxE,aAAqB,uBAAKyE,UAAU,iBAAiBzE,GC4J9D0E,IAxIe,EAAGvD,KAAIhB,SAAS,GAAIqB,gBAAeG,mBAAkBd,iBAAgBO,eACjG,MAAMuD,EAA0C,GAEhD/D,YAAgB,KACdgE,KACC,IAEH,MAAMA,EAAsB,KAC1B,MAAMC,EAAUC,+BAAqB3E,GACjC0E,GAAWF,EAAUE,IAAYF,EAAUE,GAASE,SACtDJ,EAAUE,GAASE,QAAQC,SAIzBC,EAAa,EAAGtF,OAAMM,QAAO8C,gBACjClC,EAAegC,iBAAO,CAAElD,OAAMM,QAAO8C,aAAa5C,KAG9C+E,EAAe,EAAGvF,WACtBkB,EAAeoC,mBAAS,CAAEtD,QAAQQ,KAG9BgF,EAAwB,EAAGxF,OAAMM,QAAO8C,gBAC5ClC,EAAe4C,4BAAkB,CAAE9D,OAAMM,QAAO8C,aAAa5C,KAGzDiF,EAAqB3D,IACrBD,GACFA,EAAcC,EAAOtB,IAgBnBkF,EAAe,CAAC5D,EAAkBsB,KACtC,MAAMuC,EAAY3D,GAAoBA,EAAiBF,EAAM5B,MAC7D,GAAIyF,EAAW,CACb,MAAM9E,EAA2B,eAC5BiB,EAD4B,CAE/BsB,YACAe,IAAKrC,EAAM9B,KACXuE,SAAUzC,EAAMtB,OAASyD,cAAI2B,GAAKF,EAAaE,EAAG9D,EAAM9B,MAAO8B,EAAMtB,QAAU,GAC/E0C,OAAQoC,EACRhC,SAAUiC,EACV1D,cAAe,IAAM4D,EAAkB3D,GACvCgC,kBAAmB0B,IAErB,OAAOvE,gBAAoB0E,EAAW9E,GAKxC,OAFAmE,EAAUlD,EAAM9B,MAAQiB,cAEhBa,EAAM5B,MACZ,IAAK,OACL,IAAK,QACL,IAAK,SACL,IAAK,iBACL,IAAK,WACH,OACE,gBAAC,EAAD,eACEiE,IAAKrC,EAAM9B,MACP8B,EAFN,CAGEW,IAAKuC,EAAUlD,EAAM9B,MACrBoD,UAAWA,EACXF,OAAQoC,EACRhC,SAAUiC,KAGhB,IAAK,WACH,OACE,gBAAC,EAAD,eACEpB,IAAKrC,EAAM9B,MACP8B,EAFN,CAGEW,IAAKuC,EAAUlD,EAAM9B,MACrBoD,UAAWA,EACXF,OAAQoC,EACRhC,SAAUiC,KAGhB,IAAK,WACH,OACE,gBAAC,EAAD,eACEpB,IAAKrC,EAAM9B,MACP8B,EAFN,CAGEW,IAAKuC,EAAUlD,EAAM9B,MACrBoD,UAAWA,EACXU,kBAAmB0B,KAGzB,IAAK,SACH,OACE,gBAAC,EAAD,eACErB,IAAKrC,EAAM9B,MACP8B,EAFN,CAGEW,IAAKuC,EAAUlD,EAAM9B,MACrBoD,UAAWA,EACXU,kBAAmB0B,KAIzB,IAAK,SACH,OACE,gBAAC,EAAD,eAAQrB,IAAKrC,EAAM9B,MAAU8B,EAA7B,CAAoCsB,UAAWA,EAAWvB,cAAe,IAAM4D,EAAkB3D,MAErG,IAAK,SACH,OAAO,gBAAC,EAAD,eAAQqC,IAAKrC,EAAM9B,MAAU8B,EAA7B,CAAoCsB,UAAWA,KAExD,IAAK,QACH,OACE,gBAAC,EAAD,CAAOe,IAAKrC,EAAM9B,KAAMA,KAAM8B,EAAM9B,KAAME,KAAK,QAAQK,OAAQuB,EAAMvB,QAClE0D,cAAI2B,GAAKF,EAAaE,EAAG9D,EAAM9B,MAAO8B,EAAMtB,SAInD,QACE,OAAO,OAIb,OACE,wBAAMgB,GAAIA,EAAIC,SAlGMoC,IACpBA,EAAMgC,iBAEN,MAAMC,EAAYC,uBAAavF,GAE/BU,EAAe4E,GAEVE,mBAASF,IACZrE,EAASqE,KA2FR7B,cAAIyB,EAAclF,M,+BC/IzB,4D","file":"static/js/main.1d2ad477.chunk.js","sourcesContent":["/* tslint:disable:no-console */\n\nimport * as React from 'react';\nimport Form, { ButtonProps, FieldType } from './export';\nimport { getFormData } from 'metaforms';\n// import { getFormData } from 'metaforms';\n\nconst fields1: FieldType[] = [\n  {\n    name: 'name',\n    label: 'Name',\n    type: 'text',\n    validation: [\n      {\n        type: 'required',\n        rules: [\n          {\n            message: 'This field is required.',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'button',\n    label: 'Button example',\n    type: 'button',\n  },\n  {\n    name: 'agree',\n    type: 'checkbox',\n    label: 'Agree ?',\n  },\n  {\n    name: 'my-textarea',\n    type: 'textarea',\n    value: 'Text area',\n  },\n  {\n    type: 'group',\n    name: 'first-group',\n    legend: 'Inline group', // optional\n    fields: [\n      {\n        name: 'inline-button',\n        label: 'Inline Button',\n        type: 'button',\n      },\n      {\n        type: 'text',\n        name: 'inline-input',\n        label: 'Inline Input',\n        validation: [\n          {\n            type: 'required',\n            rules: [\n              {\n                message: 'Please choose a inline text value',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'submit',\n    type: 'submit',\n  },\n];\n\nconst fields2: FieldType[] = [\n  {\n    name: 'name',\n    label: 'Name',\n    type: 'text',\n    value: 'banana',\n  },\n  {\n    name: 'submit',\n    type: 'submit',\n  },\n];\n\nconst fields3: FieldType[] = [\n  {\n    name: 'name',\n    label: 'Name',\n    type: 'text',\n    value: 'banana',\n  },\n  {\n    name: 'groups',\n    type: 'select',\n    options: [{ value: 'first' }, { value: 2, label: 'Second' }],\n  },\n  {\n    name: 'submit',\n    type: 'submit',\n  },\n];\n\nconst submit = (props: ButtonProps) => (\n  <button type=\"submit\" style={{ margin: '10px 0' }}>\n    {props.label} [OK] Custom button\n  </button>\n);\n\nconst Demo = () => {\n  const [fields, onFieldsChange] = React.useState<FieldType[]>(fields3);\n\n  return (\n    <div>\n      <button onClick={() => onFieldsChange(fields1)}>form 1</button>\n      <button onClick={() => onFieldsChange(fields2)}>form 2</button>\n      <button onClick={() => onFieldsChange(fields3)}>form 3</button>\n\n      <div style={{ display: 'flex', justifyContent: 'space-between', borderTop: '1px solid' }}>\n        <div style={{ padding: '10px' }}>\n          <Form\n            id=\"demo-form\"\n            fields={fields}\n            onFieldsChange={onFieldsChange}\n            onSubmit={formData => console.log('onSubmit', formData)}\n            onButtonClick={(field, fs) => console.log('onButtonClick', field, fs)}\n            customComponents={{ submit }}\n          />\n        </div>\n        <div style={{ padding: '10px', borderLeft: '1px solid' }}>\n          <pre>{JSON.stringify(getFormData(fields), null, 2)}</pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Demo;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Demo from './Demo';\n\nReactDOM.render(<Demo />, document.getElementById('root') as HTMLElement);\n","import * as React from 'react';\nimport { ErrorMessage, Label } from '../index';\nimport { isRequired, Value } from 'metaforms';\nimport { InputProps } from '../../export';\n\nconst getValue = (value: Value) => {\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false';\n  }\n\n  return value || '';\n};\n\nconst Input = React.forwardRef((props: InputProps, ref: React.Ref<HTMLInputElement>) => {\n  return (\n    <div>\n      {props.label && <Label fieldId={props.name} label={props.label} isRequired={isRequired(props.validation)} />}\n      <input\n        ref={ref}\n        id={props.name}\n        type={props.type}\n        name={props.name}\n        placeholder={props.placeholder}\n        value={getValue(props.value)}\n        disabled={props.disabled}\n        onChange={e => props.update({ name: props.name, value: e.target.value, groupName: props.groupName })}\n        onBlur={() => props.validate({ name: props.name })}\n        inputMode={props.inputMode}\n      />\n      {props.errorMessage ? <ErrorMessage message={props.errorMessage} /> : null}\n    </div>\n  );\n});\n\nexport default Input;\n","import * as React from 'react';\nimport { ErrorMessage, Label } from '../index';\nimport { isRequired } from 'metaforms';\nimport { TextAreaProps } from '../../export';\n\nconst Textarea = React.forwardRef((props: TextAreaProps, ref: React.Ref<HTMLTextAreaElement>) => {\n  const { label, name, validation, placeholder, value, disabled, update, validate, groupName, errorMessage } = props;\n\n  return (\n    <div>\n      {label ? <Label fieldId={name} label={label} isRequired={isRequired(validation)} /> : null}\n      <textarea\n        ref={ref}\n        id={name}\n        name={name}\n        placeholder={placeholder}\n        defaultValue={value}\n        disabled={disabled}\n        onChange={e => update({ name, value: e.target.value, groupName })}\n        onBlur={() => validate({ name })}\n      />\n      {errorMessage ? <ErrorMessage message={errorMessage} /> : null}\n    </div>\n  );\n});\n\nexport default Textarea;\n","import * as React from 'react';\nimport { CheckBoxProps } from '../../export';\nimport { Label, ErrorMessage } from '../index';\nimport { isRequired } from 'metaforms';\n\nconst Checkbox = React.forwardRef((props: CheckBoxProps, ref: React.Ref<HTMLInputElement>) => {\n  return (\n    <div>\n      {props.label && <Label fieldId={props.name} label={props.label} isRequired={isRequired(props.validation)} />}\n      <input\n        ref={ref}\n        id={props.name}\n        name={props.name}\n        type=\"checkbox\"\n        disabled={props.disabled}\n        defaultChecked={props.value || false}\n        onChange={event =>\n          props.updateAndValidate({ name: props.name, value: event.target.checked, groupName: props.groupName })\n        }\n      />\n      {props.errorMessage ? <ErrorMessage message={props.errorMessage} /> : null}\n    </div>\n  );\n});\n\nexport default Checkbox;\n","import * as React from 'react';\nimport { isRequired } from 'metaforms';\nimport { Label, ErrorMessage } from '../index';\nimport { SelectProps } from '../../export';\n\nconst Select = React.forwardRef((props: SelectProps, ref: React.Ref<HTMLSelectElement>) => {\n  return (\n    <div>\n      {props.label && <Label fieldId={props.name} label={props.label} isRequired={isRequired(props.validation)} />}\n      <select\n        ref={ref}\n        id={props.name}\n        name={props.name}\n        disabled={props.disabled}\n        defaultValue={props.value || ''}\n        onChange={event =>\n          props.updateAndValidate({ name: props.name, value: event.target.value, groupName: props.groupName })\n        }\n      >\n        {props.placeholder ? <option value=\"\">{props.placeholder}</option> : null}\n        {(props.options || []).map(option => (\n          <option value={option.value} key={option.value}>\n            {option.label || option.value}\n          </option>\n        ))}\n      </select>\n      {props.errorMessage ? <ErrorMessage message={props.errorMessage} /> : null}\n    </div>\n  );\n});\n\nexport default Select;\n","import * as React from 'react';\nimport { ButtonProps } from '../../export';\n\nconst Button: React.FC<ButtonProps> = ({ label, name, disabled, onButtonClick }) => (\n  <button disabled={disabled} name={name} type=\"button\" onClick={onButtonClick}>\n    {label}\n  </button>\n);\n\nexport default Button;\n","import * as React from 'react';\nimport { SubmitProps } from 'metaforms';\n\nconst Submit = ({ label, name, disabled }: SubmitProps) => (\n  <button disabled={disabled} name={name} type=\"submit\">\n    {label || 'Submit'}\n  </button>\n);\n\nexport default Submit;\n","import * as React from 'react';\nimport { GroupProps } from 'metaforms';\n\nexport type Props = Omit<GroupProps, 'fields'>;\n\nconst Group: React.FC<Props> = ({ legend, children }) => {\n  return (\n    <div>\n      <div>{legend ? legend : null}</div>\n      {children}\n    </div>\n  );\n};\n\nexport default Group;\n","import * as React from 'react';\n\nconst Asterisk = () => (\n  <abbr title=\"This field is required\" aria-hidden=\"true\">\n    {' '}\n    *\n  </abbr>\n);\n\ntype Props = {\n  fieldId: string;\n  label: string;\n  isRequired: boolean;\n  children?: React.ReactChildren;\n};\n\nconst Label = ({ fieldId, label, isRequired, children }: Props) => (\n  <label htmlFor={fieldId}>\n    {label}\n    {isRequired && <Asterisk />}\n    {children}\n  </label>\n);\n\nexport default Label;\n","import * as React from 'react';\n\ntype Props = {\n  message: string;\n};\n\nconst ErrorMessage = ({ message }: Props) => <div className=\"error-message\">{message}</div>;\n\nexport default ErrorMessage;\n","import * as React from 'react';\nimport { map } from 'fputils';\nimport {\n  hasError,\n  validateForm,\n  updateAndValidate,\n  validate,\n  update,\n  shouldComponentFocus,\n  FieldType,\n  UpdateActionType,\n  ValidateActionType,\n  UpdateAndValidateActionType,\n} from 'metaforms';\nimport { Input, Textarea, Checkbox, Button, Submit, Group, Select } from './index';\nimport { CustomComponentProps } from '../export';\n\nexport type Props = {\n  id: string;\n  onFieldsChange: (state: FieldType[]) => void;\n  fields?: FieldType[];\n  customComponents?: {};\n  onButtonClick?: (field: FieldType, fields: FieldType[]) => void;\n  onSubmit: (fields: FieldType[]) => void;\n};\n\nconst Form: React.FC<Props> = ({ id, fields = [], onButtonClick, customComponents, onFieldsChange, onSubmit }) => {\n  const inputRefs: { [name: string]: any } | {} = {};\n\n  React.useEffect(() => {\n    resolveFocusedField();\n  }, []);\n\n  const resolveFocusedField = () => {\n    const focused = shouldComponentFocus(fields);\n    if (focused && inputRefs[focused] && inputRefs[focused].current) {\n      inputRefs[focused].current.focus();\n    }\n  };\n\n  const thisUpdate = ({ name, value, groupName }: UpdateActionType) => {\n    onFieldsChange(update({ name, value, groupName }, fields));\n  };\n\n  const thisValidate = ({ name }: ValidateActionType) => {\n    onFieldsChange(validate({ name }, fields));\n  };\n\n  const thisUpdateAndValidate = ({ name, value, groupName }: UpdateAndValidateActionType) => {\n    onFieldsChange(updateAndValidate({ name, value, groupName }, fields));\n  };\n\n  const thisOnButtonClick = (field: FieldType) => {\n    if (onButtonClick) {\n      onButtonClick(field, fields);\n    }\n  };\n\n  const thisOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const validated = validateForm(fields);\n\n    onFieldsChange(validated);\n\n    if (!hasError(validated)) {\n      onSubmit(validated);\n    }\n  };\n\n  const getComponent = (field: FieldType, groupName?: string) => {\n    const component = customComponents && customComponents[field.type];\n    if (component) {\n      const props: CustomComponentProps = {\n        ...field,\n        groupName,\n        key: field.name,\n        children: field.fields ? map(c => getComponent(c, field.name), field.fields) : [],\n        update: thisUpdate,\n        validate: thisValidate,\n        onButtonClick: () => thisOnButtonClick(field),\n        updateAndValidate: thisUpdateAndValidate,\n      };\n      return React.createElement(component, props);\n    }\n\n    inputRefs[field.name] = React.createRef();\n\n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n      case 'datetime-local':\n      case 'password':\n        return (\n          <Input\n            key={field.name}\n            {...field}\n            ref={inputRefs[field.name]}\n            groupName={groupName}\n            update={thisUpdate}\n            validate={thisValidate}\n          />\n        );\n      case 'textarea':\n        return (\n          <Textarea\n            key={field.name}\n            {...field}\n            ref={inputRefs[field.name]}\n            groupName={groupName}\n            update={thisUpdate}\n            validate={thisValidate}\n          />\n        );\n      case 'checkbox':\n        return (\n          <Checkbox\n            key={field.name}\n            {...field}\n            ref={inputRefs[field.name]}\n            groupName={groupName}\n            updateAndValidate={thisUpdateAndValidate}\n          />\n        );\n      case 'select':\n        return (\n          <Select\n            key={field.name}\n            {...field}\n            ref={inputRefs[field.name]}\n            groupName={groupName}\n            updateAndValidate={thisUpdateAndValidate}\n          />\n        );\n\n      case 'button':\n        return (\n          <Button key={field.name} {...field} groupName={groupName} onButtonClick={() => thisOnButtonClick(field)} />\n        );\n      case 'submit':\n        return <Submit key={field.name} {...field} groupName={groupName} />;\n\n      case 'group':\n        return (\n          <Group key={field.name} name={field.name} type=\"group\" legend={field.legend}>\n            {map(c => getComponent(c, field.name), field.fields)}\n          </Group>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <form id={id} onSubmit={thisOnSubmit}>\n      {map(getComponent, fields)}\n    </form>\n  );\n};\n\nexport default Form;\n","import {\n  ButtonProps as ButtonPropsInternal,\n  CheckboxProps as CheckboxPropsInternal,\n  CommonProps,\n  FieldType,\n  InputProps as InputPropsInternal,\n  SelectProps as SelectPropsInternal,\n  TextAreaProps as TextAreaPropsInternal,\n  UpdateActionType,\n  UpdateAndValidateActionType,\n  ValidateActionType,\n  Value,\n} from 'metaforms';\n\nexport { default } from './components/Form';\nexport * from 'metaforms';\n\nexport interface CustomComponentProps extends CommonProps {\n  name: string;\n  type: string;\n  value?: Value;\n  legend?: string;\n  fields?: FieldType[];\n  update: (object: UpdateActionType) => void;\n  validate: (o: ValidateActionType) => void;\n  updateAndValidate: (o: UpdateAndValidateActionType) => void;\n  onButtonClick: () => void;\n  children?: (any | null)[];\n  key: string;\n}\n\nexport interface InputProps extends InputPropsInternal {\n  update: (object: UpdateActionType) => void;\n  validate: (o: ValidateActionType) => void;\n}\n\nexport interface TextAreaProps extends TextAreaPropsInternal {\n  update: (object: UpdateActionType) => void;\n  validate: (o: ValidateActionType) => void;\n}\n\nexport interface SelectProps extends SelectPropsInternal {\n  updateAndValidate: (o: UpdateAndValidateActionType) => void;\n}\n\nexport interface CheckBoxProps extends CheckboxPropsInternal {\n  updateAndValidate: (o: UpdateAndValidateActionType) => void;\n}\n\nexport interface ButtonProps extends ButtonPropsInternal {\n  onButtonClick: () => void;\n}\n"],"sourceRoot":""}