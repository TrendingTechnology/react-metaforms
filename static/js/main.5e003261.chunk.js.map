{"version":3,"sources":["focusedHOC.tsx","DonutChart/DonutChartDemo.tsx","DemoContainer.tsx","LineChart/LineChartDemo.tsx","RowChart/RowCharDemo.tsx","BarChart/BarChartDemo.tsx","NumberChart/NumberChartDemo.tsx","index.tsx","Axis.tsx","utils.ts","DonutChart/DonutChart.tsx","RowChart/RowChart.tsx","BarChart/BarChart.tsx","NumberChart/NumberChart.tsx","export.ts","LineChart/FilterX.tsx","LineChart/Focus.tsx","LineChart/LineChart.tsx"],"names":["focusedHOC","Wrapped","props","state","focused","undefined","this","onFocus","setState","React","data","label","value","colour","DonutChartDemo","width","filters","focusedLabel","find","r","filter","d","push","style","display","map","f","join","onClick","type","min","max","step","onChange","event","male","parseInt","target","e","height","onFilter","valueFormat","x","Math","floor","Component","DemoContainer","children","title","settings","useState","changes","input","setInput","isInvalid","setIsInvalid","marginTop","borderTop","justifyContent","minWidth","Object","keys","key","id","checked","htmlFor","rows","cols","parsed","JSON","parse","error","defaultValue","stringify","LineChartDemo","from","to","setFilter","withXLabel","withYLabel","useKeyFormat","useFilters","xLabelRotate","yAxisLabel","xAxisLabel","filterFrom","filterTo","keyFormat","xAxisTicksRotate","RowCharDemo","filterable","yLabelCustomWidth","xLabelCustomWidth","customValueFormat","customToolTipFormat","labelWidth","valueLabelWidth","val","tooltipValueFormat","BarChartDemo","NumberChartDemo","useCustomLabel","useCustomValueFormat","App","padding","ReactDOM","render","document","getElementById","XAxis","axis","updateAxis","prevProps","selected","select","call","axisBottom","scale","tickSize","tickPadding","tickFormat","rotate","selectAll","attr","axisHeightUpdated","widths","nodes","getComputedTextLength","getLabelsMaxHeight","transform","ref","t","maxWidth","sin","abs","PI","YAxis","axisLeft","axisWidthUpdated","equal","a","b","curry","fn","args","length","secArgs","head","array","newArray","slice","unshift","tail","copied","prop","name","object","updateAt","index","i","reduce","maxProp","property","reduceAxisLabels","values","ticks","ceil","getColour","isFocused","isFiltered","hsl","darker","toString","tooltipFormat","formatters","formatter","radius","getArc","arc","outerRadius","innerRadius","getPie","pie","cursor","className","defaultStyle","startAngle","endAngle","padAngle","spring","fill","stroke","strokeWidth","onMouseOver","onMouseOut","precision","circleSize","cx","cy","margin","w","maxValue","leftLabelHeight","xScale","scaleLinear","range","domain","yScale","scaleBand","rangeRound","y","widthScaled","rowHeight","dy","textAnchor","leftAxisMaxWidth","setLeftAxisMaxWidth","bottomAxisMaxWidth","setBottomAxisMaxWidth","h","scaleX","scaleY","he","bottomAxisHeightUpdated","we","axisUpdated","uniqueKey","heightFinal","bandwidth","onMouseEnter","onMouseLeave","Filter","handlePadding","focusedFrom","focusedTo","opacity","x2","x1","y1","y2","Focus","LineChart","svg","bottomAxisUpdated","bind","leftAxisUpdated","xAxisHeight","yAxisWidth","focusedX","focusedY","isFiltering","isExtending","isMoving","filterStart","filterEnd","filterFocused","filterFromFocused","filterToFocused","movingFromDiff","movingToDiff","extent","bottomLabelHeight","position","current","getBoundingClientRect","pageX","left","invert","mousePosition","bisectValue","bisector","d0","d1","focusedNode","realX","realFrom","realTo","valueLine","line","filterWidth","strokeLinejoin","strokeLinecap","FilterX","pointerEvents","onMouseMove","onMouseDown","onMouseUp"],"mappings":"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","file":"static/js/main.5e003261.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface InjectedProps {\n  focused?: string;\n  onFocus: (label: string | undefined) => void;\n}\n\ninterface State {\n  focused?: string;\n}\n\nfunction focusedHOC<P>(Wrapped: React.ComponentClass<P & InjectedProps> | React.StatelessComponent<P & InjectedProps>): React.ComponentClass<P> {\n  return class extends React.Component<P, State> {\n    constructor(props: P) {\n      super(props);\n      this.state = {\n        focused: undefined,\n      };\n    }\n\n    public render() {\n      return (\n        <Wrapped\n          {...this.props}\n          onFocus={(focused) => this.setState({ focused })}\n          focused={this.state.focused}\n        />\n      );\n    }\n  };\n}\n\nexport default focusedHOC;\n","import React, { Component } from 'react';\nimport { DonutChart, IDonutChartData } from '../export';\n\nconst data = [\n    {\n        label: \"male\",\n        value: 30,\n        colour: \"#88BB88\"\n    },\n    {\n        label: \"female\",\n        value: 60,\n        colour: \"#8888CC\"\n    },\n    {\n        label: \"unknown\",\n        value: 10,\n        colour: \"#AA8888\"\n    }\n];\n\ninterface IState {\n    width: number;\n    data: IDonutChartData[];\n    filters: string[];\n    focusedLabel?: string;\n}\n\n\nclass DonutChartDemo extends Component<object, IState> {\n\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            width: 300,\n            data,\n            filters: [],\n            focusedLabel: undefined\n        }\n    }\n\n    public filter(label: string) {\n        const { filters } = this.state;\n        if (filters.find(r => r === label)) {\n            this.setState({\n                filters: filters.filter(d => d !== label)\n            })\n        } else {\n            filters.push(label);\n            this.setState({\n                filters\n            })\n        }\n    }\n\n    public render() {\n        // console.log(this.state.width)\n        return (\n            <div style={{ display: 'flex'}}>\n                <div style={{ width: \"300px\" }}>\n                    <p>filters</p>\n                    [{this.state.filters.map(f => (`\"${f}\"`)).join(\", \")}]\n                    <button onClick={() => this.setState({ filters: [] })}>reset</button>\n\n                    <p>values</p>\n                    <input type=\"range\" min=\"0\" max=\"90\" step=\"1\" onChange={(event) => {\n                        const male = parseInt(event.target.value, 10);\n                        this.setState({\n                            data: this.state.data.map(e => {\n                                if (e.label === \"male\") { return { ...e, value: male } }\n                                if (e.label === \"female\") { return { ...e, value: 100 - 10 - male } }\n\n                                return e;\n                            })\n                        })\n                    }}\n                    />\n\n                    <p>width: {this.state.width}px</p>\n                    <input type=\"range\" min=\"50\" max=\"400\" step=\"10\" value={this.state.width} onChange={(event) => {\n                        this.setState({\n                            width: parseInt(event.target.value, 10)\n                        })\n                    }}\n                    />\n                </div>\n                <div style={{ width: '400px' }}>\n                    <DonutChart\n                        width={this.state.width}\n                        height={200}\n                        data={this.state.data}\n                        filters={this.state.filters}\n                        onFilter={(label) => this.filter(label)}\n                        valueFormat={(x) => `${Math.floor(x)}%`}\n\n                        // onMouseOver={(label) => this.setState({ focusedLabel: label })}\n                        // onMouseOut={(label) => this.setState({ focusedLabel: undefined })}\n                        // focusedLabel={this.state.focusedLabel}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DonutChartDemo;\n","import React from 'react';\n\ninterface IProps<T, D> {\n    title: string;\n    settings: T;\n    children: (settings: T, input: D) => any;\n    data: D;\n}\n\nconst DemoContainer = <T extends object, D extends object | number>({ children, title, settings, data }: IProps<T, D>) => {\n    const [changes, onChange] = React.useState<T>(settings);\n    const [input, setInput] = React.useState<D>(data);\n    const [isInvalid, setIsInvalid] = React.useState<boolean>(false);\n\n    return (\n        <div style={{ marginTop: '20px', borderTop: '1px solid grey'}}>\n            <h2>{title}</h2>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div style={{ minWidth: '300px' }}>\n                    {Object.keys(changes).map(key => {\n                        const id = `${title}=${key}`;\n                        if (typeof changes[key] === 'number') {\n                            return (\n                                <div key={`${id}-key`}>\n\n                                    <input type=\"checkbox\" id={id} checked={!!changes[key]} onChange={({ target }) => onChange({ ...changes, [key]: target.checked ? settings[key]: 0 })} />\n\n\n                                    <label htmlFor={id}>{key}: </label>\n                                    {changes[key] !== 0 && <input type=\"number\" id={id} value={changes[key]} onChange={({ target }) => onChange({ ...changes, [key]: parseInt(target.value, 10) })} />}\n                                </div>\n                            )\n                        }\n\n\n                        return (\n                            <div key={`${id}-key`}>\n                                <input type=\"checkbox\" id={id} checked={changes[key]}\n                                       onChange={({ target }) => onChange({ ...changes, [key]: target.checked })} />\n                                <label htmlFor={id}>{key}</label>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div>\n                    {children(changes, input)}\n                </div>\n                <div>\n                    <textarea\n                        style={{ height: '100%' }}\n                        rows={10}\n                        cols={50}\n                        onChange={(event) => {\n                            try {\n                                const parsed = JSON.parse(event.target.value);\n                                setInput(parsed);\n                                setIsInvalid(false);\n                            } catch (error) {\n                                setIsInvalid(true);\n                            }\n                        }}\n                        defaultValue={JSON.stringify(data, null, 2)}\n                    />\n                    <div>{isInvalid && <span>invalid JSON</span>}</div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default DemoContainer;\n","import React from 'react';\nimport { LineChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: 1,\n        value: 50,\n    },\n    {\n        key: 2,\n        value: 20,\n    },\n    {\n        key: 3,\n        value: 40,\n    },\n    {\n        key: 5,\n        value: 30,\n    },\n    {\n        key: 6,\n        value: 10,\n    }\n];\n\nconst LineChartDemo = () => {\n    const [filter, setFilter] = React.useState<any>({ from: 3, to: 5 });\n\n    return (\n        <div>\n            <DemoContainer title=\"Line chart\" settings={{ withXLabel: true, withYLabel: true, useKeyFormat: false, useFilters: true, xLabelRotate: false }} data={data}>\n                {(settings, input) => {\n                    return (\n                        <div>\n                            <LineChart\n                                data={input}\n                                height={300}\n                                width={500}\n                                yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                                xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                                colour=\"green\"\n                                onFilter={settings.useFilters ? ({ from, to }) => setFilter({ from, to }) : undefined}\n                                filterFrom={settings.useFilters ? filter.from : undefined}\n                                filterTo={settings.useFilters ? filter.to : undefined}\n                                keyFormat={settings.useKeyFormat ? (value) => `${value},-` : undefined}\n                                xAxisTicksRotate={settings.xLabelRotate ? -45 : undefined}\n                            />\n                            {settings.useFilters && <pre>{JSON.stringify(filter)}</pre>}\n                        </div>\n                    )\n                }}\n            </DemoContainer>\n        </div>\n    )\n};\n\nexport default LineChartDemo;\n","import React from 'react';\nimport { RowChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: \"a\",\n        value: 50,\n    },\n    {\n        key: \"b\",\n        value: 20,\n    },\n    {\n        key: \"c\",\n        value: 40,\n    },\n    {\n        key: \"d\",\n        value: 10,\n    }\n];\n\n\nconst RowCharDemo: React.FC = () => {\n    const [filters, setFilter] = React.useState<string[]>([]);\n    return (\n        <DemoContainer\n            title=\"Row chart\"\n            data={data}\n            settings={{\n                withXLabel: true,\n                withYLabel: true,\n                filterable: true,\n                yLabelCustomWidth: 15,\n                xLabelCustomWidth: 100,\n                customValueFormat: false,\n                customToolTipFormat: false\n            }}>\n            {(settings, input) => (\n                <div>\n                    <RowChart\n                        data={input}\n                        width={400}\n                        yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                        xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                        colour=\"green\"\n                        onFilter={settings.filterable ? (filter) => setFilter([...filters, filter]) : undefined}\n                        filters={settings.filterable ? filters : undefined}\n                        labelWidth={settings.yLabelCustomWidth || undefined}\n                        valueLabelWidth={settings.xLabelCustomWidth || undefined}\n                        valueFormat={settings.customValueFormat ? (val) => `${val},-` : undefined}\n                        tooltipValueFormat={settings.customToolTipFormat ? (val) => `${val} custom tooltip` : undefined}\n                    />\n                    {settings.filterable && <pre>{JSON.stringify(filters)}</pre>}\n                </div>\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default RowCharDemo;\n","import React from 'react';\nimport { BarChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst BarChartDemo: React.FC = () => {\n\n    const data = [{ key: '8', value: 8 }, { key: '10', value: 10 }];\n\n    return (\n        <DemoContainer title=\"Bar chart\" settings={{ withXLabel: true, withYLabel: true, xLabelRotate: false }} data={data}>\n            {(settings, input) => (\n                <BarChart\n                    data={input}\n                    height={300}\n                    width={300}\n                    colour=\"green\"\n                    yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                    xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                    xAxisTicksRotate={settings.xLabelRotate ? -45 : undefined}\n                />)}\n        </DemoContainer>\n    );\n};\n\nexport default BarChartDemo;\n","import * as React from \"react\";\nimport { NumberChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\n\nconst NumberChartDemo: React.FC = () => {\n\n    return (\n        <DemoContainer\n            title=\"Number chart\"\n            data={50}\n            settings={{ useCustomLabel: false, useCustomValueFormat: false }}\n        >\n            {(settings, input) => (\n                <NumberChart\n                    value={input}\n                    label={settings.useCustomLabel ? 'custom label' : undefined}\n                    valueFormat={settings.useCustomValueFormat ? (val) => `${val},-` : undefined}\n                />\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default NumberChartDemo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DonutChartDemo from './DonutChart/DonutChartDemo';\nimport LineChartDemo from './LineChart/LineChartDemo';\nimport RowCharDemo from './RowChart/RowCharDemo';\nimport BarChartDemo from './BarChart/BarChartDemo';\nimport NumberChartDemo from './NumberChart/NumberChartDemo';\n\nconst App = () => (\n    <div>\n        <div style={{ padding: '10px'}}>\n\n            <h3>Donut chart</h3>\n            <DonutChartDemo />\n\n            <LineChartDemo />\n\n            <RowCharDemo />\n\n            <BarChartDemo />\n\n            <NumberChartDemo />\n        </div>\n    </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import * as React from \"react\";\n\nimport { axisBottom, axisLeft, ScaleBand, ScaleLinear, select } from \"d3\";\nimport { max } from \"./utils\";\n\ninterface XAxisProps {\n    scale: ScaleBand<string>;\n    height: number;\n    tickFormat?: (value: string, index: number) => string;\n    rotate?: number;\n    axisHeightUpdated?: (labelMaxWidth: number) => void;\n}\n\nexport class XAxis extends React.Component<XAxisProps, {}> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: XAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        // @ts-ignore\n        const selected = select(this.axis).call(axisBottom(this.props.scale).tickSize(0).tickPadding(6).tickFormat(this.props.tickFormat));\n\n        if (this.props.rotate) {\n            selected.selectAll(\"g.tick text\")\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-10\")\n                .attr(\"dy\", \"0\")\n                .attr(\"transform\", `rotate(${this.props.rotate})`);\n\n            if (this.props.axisHeightUpdated) {\n                // @ts-ignore\n                const widths = selected.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n                this.props.axisHeightUpdated(this.getLabelsMaxHeight(widths));\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <g transform={`translate(0,${this.props.height})`} ref={(t) => (this.axis = t)} />\n        );\n    }\n\n    private getLabelsMaxHeight(widths: number[]): number {\n        const maxWidth = max(widths);\n        if (this.props.rotate) {\n            // calculate right height by sin(angle) * maxWidth\n            return Math.sin(Math.abs(this.props.rotate) * Math.PI / 180) * maxWidth;\n        }\n        return 0;\n    }\n}\n\ninterface YAxisProps {\n    scale: ScaleLinear<number, any | {}>;\n    axisWidthUpdated?: (labelMaxWidth: number) => void;\n    tickFormat?: (value: number) => string;\n}\n\nexport class YAxis extends React.Component<YAxisProps, {}> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: YAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        // @ts-ignore\n        const axis = select(this.axis).call(axisLeft(this.props.scale).tickFormat(this.props.tickFormat || null));\n\n        if (this.props.axisWidthUpdated) {\n            // @ts-ignore\n            const widths = axis.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n\n            this.props.axisWidthUpdated(max(widths));\n        }\n    }\n\n    public render() {\n        return <g ref={(t) => (this.axis = t)} />;\n    }\n}\n","import { hsl } from 'd3';\n\nconst equal = (a: any, b: any): boolean => a === b;\n\nexport const curry = (fn: (...x: any[]) => any) => {\n  const r = args => {\n    if (args.length >= fn.length) {\n      return fn(...args);\n    }\n    return (...secArgs) => r([...args, ...secArgs]);\n  };\n\n  return (...args) => r(args);\n};\n\nexport const prepend = curry((value: string, array: any[]): any[] => {\n  const newArray = array.slice();\n  newArray.unshift(value);\n  return newArray;\n});\n\nexport const head = (input: any) => input[0] || null;\n\nexport const tail = <T>(array: T[]): T[] => array.slice(1);\n\nexport const push = (value: any, array: any[]): any[] => {\n  const copied = array.slice();\n  copied.push(value);\n  return copied;\n};\n\nexport const prop = curry((name: string, object: object) => object[name]);\n\nexport const not = input => !input;\n\nexport const remove = curry((value: any, array: any[]): any[] => array.filter(x => !equal(x, value)));\n\ntype fnType = (x: any) => any;\n\nexport const compose = (...fns: fnType[]) => (value: any) => fns.reduceRight((args, fn) => fn(args), value);\n\nexport const updateAt = curry((index: number, value: any, array: any[]): any[] => {\n  if (array.length <= index) {\n    return updateAt(index, value, push(null, array));\n  }\n\n  return array.map((x, i) => (equal(i, index) ? value : x));\n});\n\nconst notNull = (value: any): boolean => value !== null;\n\nexport const isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport const makeEven = (valueToFill: any) => (array: any[]): any[] => (isOdd(array.length) ? push(valueToFill, array) : array);\n\nexport const join = (by: string) => array => array.map(a => (a.filter(notNull).length > 1 ? a.join(by) : null)).filter(notNull);\n\nconst reduce = (fn, array: number[]) => {\n  if (array.length === 0) {\n    return 0;\n  }\n  return array.reduce(fn);\n};\n\nexport const max = (array: number[]): number => reduce((a, b) => Math.max(a, b), array);\n// const min = (array: number[]): number => reduce((a, b) => Math.min(a, b), array);\n\nexport const maxProp = (property: string, array: object[]) => max(array.map(d => d[property]));\n\nexport const reduceAxisLabels = (width: number, values: string[]): ((label: string, index: number) => string) => {\n  const spaceForText = 15;\n  const ticks = width / spaceForText;\n\n  if (values.length > ticks) {\n    const x = Math.ceil(values.length / ticks);\n    return (label: string, index: number): string => (index % x === 0 ? label : '');\n  }\n  return (label: string, index: number): string => label;\n};\n\nexport const getColour = (colour: string, label?: string, filters: string[] = [], isFocused: boolean = false): string => {\n  const isFiltered = filters.length > 0;\n  if (isFiltered && !filters.find(f => f === label)) {\n    if (isFocused) {\n      return hsl('grey')\n        .darker(0.5)\n        .toString();\n    }\n    return 'grey';\n  }\n\n  if (isFocused) {\n    return hsl(colour)\n      .darker(0.5)\n      .toString();\n  }\n  return colour;\n};\n\nexport type Optional<T> = T | undefined;\n\n/**\n * @param {number} value\n * @param {(value: number) => string[]} formatters needs to be in order in which we want to format the {value} first\n * @returns {string}\n */\nexport const tooltipFormat = (value: number, ...formatters: Array<Optional<(value: number) => string>>): string => {\n  if (formatters.length === 0) {\n    return `${value}`;\n  }\n  const formatter = head(formatters);\n  return formatter ? formatter(value) : tooltipFormat(value, ...tail(formatters));\n};\n","import { arc, pie } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\nimport { IDonutChart, IDonutChartData } from '../interfaces';\n\nconst DonutChart = ({\n                        data = [],\n                        width,\n                        height,\n                        filters = [],\n                        onFilter,\n                        onFocus,\n                        focused,\n                        children,\n                        valueFormat,\n                        tooltipValueFormat,\n                    }: IDonutChart & InjectedProps) => {\n    const radius = Math.min(width, height) / 2;\n\n    const getArc: any = arc()\n        .outerRadius(radius)\n        .innerRadius(radius - (radius / 5));\n\n    const getPie = pie<IDonutChartData>().value((d: IDonutChartData): number => d.value);\n\n    const cursor = onFilter ? \"pointer\" : \"default\";\n\n    return (\n        <div className=\"DonutChart\" style={{ width }}>\n            <svg width={width} height={height}>\n                <g transform={`translate(${width / 2}, ${height / 2})`}>\n                    {getPie(data)\n                        .filter((d) => !!d.data.colour)\n                        .map((slice) => (\n                            <Motion\n                                key={`${slice.data.label}-${slice.data.value}`}\n                                defaultStyle={{\n                                    startAngle: slice.startAngle,\n                                    endAngle: slice.endAngle,\n                                    padAngle: slice.padAngle,\n                                }}\n                                style={{\n                                    startAngle: spring(slice.startAngle),\n                                    endAngle: spring(slice.endAngle),\n                                    padAngle: spring(slice.padAngle),\n                                }}\n                            >\n                                {(value) => (\n                                    <g>\n                                        <path\n                                            fill={getColour(slice.data.colour, slice.data.label, filters, slice.data.label === focused)}\n                                            d={getArc(value)}\n                                            stroke=\"white\"\n                                            strokeWidth={1}\n                                            cursor={cursor}\n                                            onClick={\n                                                onFilter\n                                                    ? (event) => onFilter(slice.data.label)\n                                                    : undefined\n                                            }\n                                            onMouseOver={() => onFocus(slice.data.label || undefined)}\n                                            onMouseOut={() => onFocus(undefined)}\n                                        />\n                                        <title>\n                                            {`${slice.data.label ? `${slice.data.label}: ` : \"\"}${tooltipFormat(slice.data.value, tooltipValueFormat, valueFormat)}` }\n                                        </title>\n                                    </g>\n                                )}\n                            </Motion>\n                        ))}\n                    {children}\n                </g>\n            </svg>\n\n            <div className=\"legend\">\n                {data.filter((d) => !!d.label).map(({ label, value, colour }, index) => (\n                    <Motion\n                        key={label}\n                        defaultStyle={{ x: 0 }}\n                        style={{ x: spring(value, { precision: 10 }) }}\n                    >\n                        {(val) => {\n                            const circleSize = label === focused ? 10 : 6;\n                            return (\n                                <div\n                                    onClick={onFilter ? () => onFilter(label) : undefined}\n                                    onMouseOver={() => onFocus(label || undefined)}\n                                    onMouseOut={() => onFocus(undefined)}\n                                    className=\"label\"\n                                    style={{ cursor }}\n                                >\n                                    <div className=\"legend-item\">\n                                        <svg height=\"20\" width=\"20\">\n                                            <Motion\n                                                defaultStyle={{ x: 0 }}\n                                                style={{ x: spring(circleSize) }}\n                                            >\n                                                {({ x }) => (\n                                                    <circle cx=\"10\" cy=\"10\" r={x} fill={colour} />\n                                                )}\n                                            </Motion>\n                                        </svg>\n                                        <div>{label}</div>\n                                        <div>{valueFormat ? valueFormat(val.x) : val.x}</div>\n                                    </div>\n                                </div>\n                            );\n                        }}\n                    </Motion>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default focusedHOC(DonutChart);\n","import { scaleBand, scaleLinear } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { maxProp } from \"../utils\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\nimport { IRowChart } from '../interfaces';\n\nconst RowChart: React.FC<IRowChart & InjectedProps> = ({ data = [], width, filters = [], focused, onFilter, onFocus, colour, valueFormat, tooltipValueFormat, labelWidth = 80, valueLabelWidth = 40, xAxisLabel, yAxisLabel }) => {\n    const rowHeight = 40;\n    const height = rowHeight * data.length;\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const w = width - margin.left - margin.right;\n    const maxValue = maxProp(\"value\", data);\n    const labelsHeight = 20;\n    const labelBottomPadding = 4;\n    const valueLabelLeftPadding = 5;\n\n    const leftAxisMaxWidth = 0;\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n\n    const xScale = scaleLinear()\n        .range([0, w - labelWidth - valueLabelWidth - valueLabelLeftPadding])\n        .domain([0, maxValue]);\n\n    const yScale = scaleBand()\n        .rangeRound([0, height - margin.top - margin.bottom])\n        .domain(data.map((d) => d.key));\n\n    return (\n        <svg width={width} height={height} className=\"RowChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                {data.map((d) => {\n                    const y = yScale(d.key) || 0;\n                    return (\n                        <g\n                            key={d.key}\n                            cursor={onFilter ? \"pointer\" : \"default\"}\n                            onClick={onFilter ? (event) => onFilter(d.key) : undefined}\n                            onMouseOver={(event) => onFocus(d.key)}\n                            onMouseOut={(event) => onFocus(undefined)}\n                        >\n                            <Motion\n                                defaultStyle={{ width: 0 }}\n                                style={{ width: spring(d.value) }}\n                            >\n                                {(style) => {\n                                    const widthScaled = xScale(style.width);\n                                    return (\n                                        <rect\n                                            fill={getColour(colour, d.key, filters, focused === d.key)}\n                                            x={labelWidth}\n                                            y={y}\n                                            width={widthScaled > 0 ? widthScaled : 0}\n                                            height={rowHeight / 2}\n                                        />\n                                    );\n                                }}\n                            </Motion>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={0}>{d.key}</text>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={xScale(maxValue) + labelWidth + valueLabelLeftPadding}>\n                                {valueFormat ? valueFormat(d.value) : d.value}\n                            </text>\n\n                            <title>\n                                {`${d.key}: ${tooltipFormat(d.value, tooltipValueFormat, valueFormat)}`}\n                            </title>\n                        </g>\n                    );\n                })}\n\n                {xAxisLabel ? (<text className=\"RowChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\" textAnchor=\"middle\">{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (<text className=\"RowChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth} dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text>) : null}\n\n            </g>\n        </svg>\n    );\n};\n\nexport default focusedHOC(RowChart);\n","import * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { scaleBand, scaleLinear } from \"d3\";\n\nimport { getColour, maxProp, prop, reduceAxisLabels, tooltipFormat } from \"../utils\";\nimport { XAxis, YAxis } from \"../Axis\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { IBarChart } from '../interfaces';\n\nconst BarChart: React.FC<IBarChart & InjectedProps> = ({ width, height, data, filters, colour, focused, valueFormat, tooltipValueFormat, onFilter, onFocus, xAxisTicksRotate, xAxisLabel, yAxisLabel }) => {\n    const [leftAxisMaxWidth, setLeftAxisMaxWidth] = React.useState(0);\n    const [bottomAxisMaxWidth, setBottomAxisMaxWidth] = React.useState(0);\n\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n    const bottomLabelHeight = xAxisLabel ? 19 : 0;\n    const w = width - margin.left - margin.right - leftAxisMaxWidth - tickPadding - leftLabelHeight;\n    const h = height - margin.top - margin.bottom - bottomAxisMaxWidth - tickPadding - bottomLabelHeight;\n    const keys = data.map(prop(\"key\")) as string[];\n\n    const scaleX = scaleBand()\n        .range([0, w])\n        .padding(0.1)\n        .domain(keys);\n    const scaleY = scaleLinear()\n        .range([h, 0])\n        .domain([0, maxProp(\"value\", data)]);\n\n    const axisUpdated = (width: number) => {\n        if (leftAxisMaxWidth !== width) {\n            setLeftAxisMaxWidth(width)\n        }\n    };\n\n    const bottomAxisHeightUpdated = (height: number) => {\n        if (bottomAxisMaxWidth !== height) {\n            setBottomAxisMaxWidth(height)\n        }\n    };\n\n    return (\n        <svg width={width} height={height} className=\"BarChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                <XAxis\n                    height={h}\n                    scale={scaleX}\n                    rotate={xAxisTicksRotate}\n                    tickFormat={reduceAxisLabels(w, keys)}\n                    axisHeightUpdated={(he) => bottomAxisHeightUpdated(he)}\n                />\n                <YAxis scale={scaleY} tickFormat={valueFormat} axisWidthUpdated={(we) => axisUpdated(we)} />\n\n                {data.map(({ key, value, uniqueKey }) => (\n                    <g key={uniqueKey || `${key}-${value}`}>\n                        <Motion defaultStyle={{ x: h }} style={{ x: spring(scaleY(value)) }}>\n                            {({ x }) => {\n                                const heightFinal = h - x;\n                                return (\n                                    <rect\n                                        x={scaleX(key)}\n                                        y={x}\n                                        cursor={onFilter ? \"pointer\" : \"default\"}\n                                        width={scaleX.bandwidth()}\n                                        height={heightFinal > 0 ? heightFinal : 0}\n                                        fill={getColour(colour, key, filters, focused === key)}\n                                        onClick={onFilter ? () => onFilter(key) : undefined}\n                                        onMouseEnter={() => onFocus(key)}\n                                        onMouseLeave={() => onFocus(undefined)}\n                                    />\n                                );\n                            }}\n                        </Motion>\n\n                        <title>\n                            {`${key}: ${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}\n                        </title>\n                    </g>\n                ))}\n\n                {xAxisLabel ? (<text className=\"BarChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\"\n                                     textAnchor=\"middle\">{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (\n                    <text className=\"BarChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth}\n                          dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text>) : null}\n            </g>\n        </svg>\n    );\n}\n\nexport default focusedHOC(BarChart);\n","import * as React from \"react\";\n\nimport focusedHOC from \"../focusedHOC\";\nimport { tooltipFormat } from \"../utils\";\n\ninterface Props {\n    value: number;\n    label?: string;\n\n    valueFormat?: (value: number) => string;\n    tooltipValueFormat?: (value: number) => string;\n}\n\nconst NumberChart: React.FC<Props> = ({ value, label, valueFormat, tooltipValueFormat, children }) => {\n\n    return (\n        <div className=\"NumberChart\"\n             title={`${label ? `${label}: ` : \"\"}${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}>\n            {children}\n            <div className=\"value\">\n                {valueFormat ? valueFormat(value) : value}\n            </div>\n        </div>\n    );\n};\n\nexport default focusedHOC(NumberChart);\n","export { default as DonutChart } from './DonutChart/DonutChart';\nexport { default as RowChart } from './RowChart/RowChart';\nexport { default as BarChart } from './BarChart/BarChart';\nexport { default as LineChart } from './LineChart/LineChart';\nexport { default as NumberChart } from './NumberChart/NumberChart';\n\nexport * from './interfaces';\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  width: number;\n  x: number;\n  colour: string;\n  handlePadding: number;\n\n  focusedFrom: boolean;\n  focusedTo: boolean;\n}\n\nconst Filter = ({\n  height,\n  width,\n  x,\n  colour,\n  handlePadding,\n  focusedFrom,\n  focusedTo,\n}: Props) => {\n  const strokeWidth = handlePadding * 2;\n  return (\n    <g>\n      <rect\n        x={x}\n        y={0}\n        width={width}\n        height={height}\n        cursor=\"move\"\n        fill={colour}\n        opacity={0.5}\n      />\n      <line\n        x2={x}\n        x1={x}\n        y1={0}\n        y2={height}\n        stroke={focusedFrom ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n      <line\n        x2={x + width}\n        x1={x + width}\n        y1={0}\n        y2={height}\n        stroke={focusedTo ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n    </g>\n  );\n};\n\nexport default Filter;\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  x: number;\n  y: number;\n}\n\nconst Focus = ({ height, x, y }: Props) => (\n  <g>\n    <line x1={0} x2={x} y1={y} y2={y} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <line x1={x} x2={x} y1={y} y2={height} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <circle r={4} cx={x} cy={y} />\n  </g>\n);\n\nexport default Focus;\n","import * as React from \"react\";\n\nimport { bisector, extent, line, scaleLinear, } from \"d3\";\n\nimport { XAxis, YAxis } from \"../Axis\";\nimport FilterX from \"./FilterX\";\nimport Focus from \"./Focus\";\nimport { ILineChart, ILineChartData } from '../interfaces';\n\nconst margin = { top: 10, right: 10, bottom: 20, left: 20 };\n\nconst filterHandlePadding = 2; // px\n\ninterface State {\n    xAxisHeight: number;\n    yAxisWidth: number;\n\n    focusedX: number;\n    focusedY: number;\n\n    isFocused: boolean;\n    isFiltering: boolean;\n    isExtending: boolean;\n    isMoving: boolean;\n\n    filterStart?: number;\n    filterEnd?: number;\n\n    filterFocused: boolean;\n    filterFromFocused: boolean;\n    filterToFocused: boolean;\n\n    movingFromDiff?: number;\n    movingToDiff?: number;\n}\n\nclass LineChart extends React.Component<ILineChart, State> {\n    private svg = React.createRef<any>();\n\n    constructor(props: ILineChart) {\n        super(props);\n        this.bottomAxisUpdated = this.bottomAxisUpdated.bind(this);\n        this.leftAxisUpdated = this.leftAxisUpdated.bind(this);\n\n        this.state = {\n            xAxisHeight: 0,\n            yAxisWidth: 0,\n\n            focusedX: 0,\n            focusedY: 0,\n\n            isFocused: false,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n\n            filterStart: 0,\n            filterEnd: 0,\n\n            filterFocused: false,\n            filterFromFocused: false,\n            filterToFocused: false,\n\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        };\n    }\n\n    public scaleX() {\n        const leftLabelHeight = this.state.yAxisWidth ? 19 : 0;\n        const w = this.props.width - margin.left - margin.right - this.state.yAxisWidth - leftLabelHeight;\n\n        return scaleLinear()\n            .rangeRound([0, w])\n            .domain(extent(this.props.data, (d) => d.key) as number[]);\n    }\n\n    public scaleY() {\n        const bottomLabelHeight = this.props.xAxisLabel ? 19 : 0;\n        const h = this.props.height - margin.top - margin.bottom - this.state.xAxisHeight - bottomLabelHeight;\n        return scaleLinear()\n            .rangeRound([h, 0])\n            .domain(extent(this.props.data, (d) => d.value) as number[]);\n    }\n\n    public mousePosition(event: MouseEvent) {\n        const position = this.svg.current.getBoundingClientRect();\n        const x = event.pageX - margin.left - this.state.yAxisWidth - position.left;\n\n        return this.scaleX().invert(x);\n    }\n\n    public onMouseMove(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.isMoving) {\n            this.setState({\n                filterStart: x - (this.state.movingFromDiff || 0),\n                filterEnd: x + (this.state.movingToDiff || 0),\n            });\n        } else if (this.state.isExtending) {\n            this.setState({\n                filterEnd: x,\n            });\n        } else if (this.state.isFiltering) {\n            this.setState({\n                filterEnd: x,\n                filterToFocused: true,\n            });\n        } else if (this.state.isFocused) {\n            const { data } = this.props;\n\n            const bisectValue = bisector<ILineChartData, number>((d) => d.key).left;\n\n            const i = bisectValue(data, x);\n            const d0 = data[i - 1];\n            const d1 = data[i];\n\n            if (!d0) {\n                return;\n            }\n            if (!d1) {\n                return;\n            }\n\n            const focusedNode = x - d0.key > d1.key - x ? d1 : d0;\n\n            const scaleX = this.scaleX();\n            const realX = scaleX(x);\n\n            let filterFocused = false;\n            let filterToFocused = false;\n            let filterFromFocused = false;\n            if (this.props.filterFrom && this.props.filterTo) {\n                const realFrom = scaleX(this.props.filterFrom);\n                const realTo = scaleX(this.props.filterTo);\n\n                if (\n                    realX - filterHandlePadding < realTo &&\n                    realTo < realX + filterHandlePadding\n                ) {\n                    filterToFocused = true;\n                } else if (\n                    realX - filterHandlePadding < realFrom &&\n                    realFrom < realX + filterHandlePadding\n                ) {\n                    filterFromFocused = true;\n                } else if (\n                    realFrom + filterHandlePadding <= realX &&\n                    realX <= realTo - filterHandlePadding\n                ) {\n                    filterFocused = true;\n                }\n            }\n\n            this.setState({\n                focusedX: scaleX(focusedNode.key),\n                focusedY: this.scaleY()(focusedNode.value),\n                filterFocused,\n                filterFromFocused,\n                filterToFocused,\n            });\n        }\n    }\n\n    public onMouseDown(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.filterFocused) {\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isMoving: true,\n                movingFromDiff: x - (this.props.filterFrom || 0),\n                movingToDiff: (this.props.filterTo || 0) - x,\n                isFocused: false,\n            });\n        } else if (this.state.filterToFocused) {\n            // extending from Right\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else if (this.state.filterFromFocused) {\n            // extending from Left\n            this.setState({\n                filterStart: this.props.filterTo,\n                filterEnd: this.props.filterFrom,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else {\n            // filtering\n            this.setState({\n                filterStart: x,\n                filterEnd: x,\n                isFiltering: true,\n                isFocused: false,\n            });\n        }\n    }\n\n    public onMouseUp() {\n        if (this.props.onFilter) {\n            const { filterStart, filterEnd } = this.state;\n\n            let from = filterStart;\n            let to = filterEnd;\n            if (filterStart && filterEnd && filterStart > filterEnd) {\n                from = filterEnd;\n                to = filterStart;\n            } else if (from === to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            if (!from || !to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            this.props.onFilter({ from, to });\n        }\n\n        this.setState({\n            filterStart: undefined,\n            filterEnd: undefined,\n            isFocused: true,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        });\n    }\n\n    public cursor() {\n        if (!this.props.onFilter) {\n            return \"default\";\n        }\n        if (this.state.filterFocused) {\n            return \"move\";\n        }\n\n        if (this.state.filterFromFocused) {\n            return \"ew-resize\";\n        }\n\n        if (this.state.filterToFocused) {\n            return \"ew-resize\";\n        }\n        return \"crosshair\";\n    }\n\n    private bottomAxisUpdated(height: number) {\n        if (this.state.xAxisHeight !== height) {\n            this.setState({ xAxisHeight: height })\n        }\n    }\n\n    private leftAxisUpdated(width: number) {\n        if (this.state.yAxisWidth !== width) {\n            this.setState({ yAxisWidth: width })\n        }\n    }\n\n    public render() {\n        const { data, width, height, xAxisLabel, yAxisLabel, valueFormat, keyFormat, colour } = this.props;\n        const leftLabelHeight = yAxisLabel ? 19 : 0;\n        const bottomLabelHeight = xAxisLabel ? 19 : 0;\n        const h = height - margin.top - margin.bottom - this.state.xAxisHeight - bottomLabelHeight;\n        const scaleX = this.scaleX();\n\n        const valueLine: any = line()\n            .x((d: any) => scaleX(d.key))\n            .y((d: any) => this.scaleY()(d.value));\n\n        const filterFrom = this.props.filterFrom || 0;\n        const filterTo = this.props.filterTo || 0;\n\n        let filterStart = scaleX(Math.min(filterFrom, filterTo));\n        let filterWidth = Math.abs(scaleX(filterFrom) - scaleX(filterTo));\n\n        if (\n            this.state.isFiltering ||\n            this.state.isExtending ||\n            this.state.isMoving\n        ) {\n            filterStart = scaleX(\n                Math.min(this.state.filterStart || 0, this.state.filterEnd || 0),\n            );\n            filterWidth =\n                this.state.filterEnd === 0\n                    ? 0\n                    : Math.abs(\n                    scaleX(this.state.filterStart || 0) -\n                    scaleX(this.state.filterEnd || 0),\n                    );\n        }\n\n        const isFiltered = this.state.isFiltering || this.state.isExtending || filterFrom;\n\n        return (\n            <svg width={width} height={height} ref={this.svg}>\n                <g transform={`translate(${margin.left + this.state.yAxisWidth + leftLabelHeight}, ${margin.top})`}>\n                    <XAxis\n                        height={h}\n                        scale={this.scaleX() as any}\n                        tickFormat={keyFormat}\n                        rotate={this.props.xAxisTicksRotate}\n                        axisHeightUpdated={this.bottomAxisUpdated}\n                    />\n                    <YAxis\n                        scale={this.scaleY()}\n                        tickFormat={valueFormat}\n                        axisWidthUpdated={this.leftAxisUpdated}\n                    />\n\n                    <path\n                        d={valueLine(data)}\n                        fill=\"none\"\n                        stroke={colour}\n                        strokeWidth={1.5}\n                        strokeLinejoin=\"round\"\n                        strokeLinecap=\"round\"\n                    />\n\n                    {this.state.isFocused ? (\n                        <Focus x={this.state.focusedX} y={this.state.focusedY} height={h} />) : null}\n                    {isFiltered ? (\n                        <FilterX\n                            height={h}\n                            x={filterStart}\n                            width={filterWidth}\n                            colour={colour}\n                            handlePadding={filterHandlePadding}\n                            focusedFrom={this.state.filterFromFocused}\n                            focusedTo={this.state.filterToFocused}\n                        />\n                    ) : null}\n\n                    <rect\n                        fill=\"none\"\n                        pointerEvents=\"all\"\n                        cursor={this.cursor()}\n                        width={width - margin.left - margin.right - this.state.yAxisWidth - leftLabelHeight}\n                        height={height - margin.top - margin.bottom}\n                        onMouseMove={(event: any) => this.onMouseMove(event)}\n                        onMouseOut={() => this.setState({ isFocused: false })}\n                        onMouseOver={() => this.setState({ isFocused: true })}\n                        onMouseDown={(event: any) => this.props.onFilter ? this.onMouseDown(event) : null}\n                        onMouseUp={(event: any) => this.props.onFilter ? this.onMouseUp() : null}\n                    />\n\n                    {xAxisLabel ? <text transform={`translate(${width / 2}, ${height})`} dy=\"-1em\"\n                                        textAnchor=\"middle\">{xAxisLabel}</text> : null}\n\n                    {yAxisLabel ? <text transform=\"rotate(-90)\" y={-this.state.yAxisWidth} x={-(height / 2)} dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text> : null}\n\n                </g>\n            </svg>\n        );\n    }\n}\n\nexport default LineChart;\n"],"sourceRoot":""}